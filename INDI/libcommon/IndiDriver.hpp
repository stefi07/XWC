/// IndiDriver.hpp
///
/// @author Paul Grenz
///
////////////////////////////////////////////////////////////////////////////////

#ifndef PCF_INDI_DRIVER_HPP
#define PCF_INDI_DRIVER_HPP

#include <string>
#include "IndiConnection.hpp"

////////////////////////////////////////////////////////////////////////////////

namespace pcf
{
class IndiDriver : public pcf::IndiConnection
{
  // construction/destruction/assign/copy
  public:
    /// Standard constructor.
    IndiDriver();
    /// Constructor which sets the name, version, and INDI protocol version.
    IndiDriver( const std::string &szName,
                const std::string &szVersion,
                const std::string &szProtocolVersion );
                
    /// Standard destructor.
    virtual ~IndiDriver() noexcept(true);

  // Prevent these from being invoked.
  private:
    /// Copy constructor.
    IndiDriver( const IndiDriver &idRhs );
    /// Assignment operator.
    const IndiDriver &operator= ( const IndiDriver &idRhs );
    /// Sets up file descriptors and other things that need to be
    /// initialized at construction time.
    void setup();

  // Standard device interface methods.
  public:
    /// After the main execution loop, before the thread exits.
    virtual void afterExecute();
    /// Before the main execution loop, before the thread update loop starts.
    virtual void beforeExecute();
    /// Function which executes in the separate thread.
    virtual void execute();
    /// Chooses what to do with the received property.
    virtual void dispatch( const IndiMessage::Type &tType,
                           const IndiProperty &ipDispatch );

    /// Received a DEF PROPERTY. A remote device sends a 'DEF' to tell other
    /// INDI devices that are interested what properties it has available.
    /// (see 'sendDefProperty')
    virtual void handleDefProperty( const pcf::IndiProperty &ipRecv );
    /// Received a DEL PROPERTY. A remote device is telling us that one of its
    /// properties is no longer available, or a device is no longer available.
    /// (see 'sendDelProperty')
    virtual void handleDelProperty( const pcf::IndiProperty &ipRecv );
    /// Received a GET PROPERTIES. An remote device will send this command to
    /// learn what INDI properties this device has. A DEF PROPERTY can be
    /// sent as a reply. (see 'sendDefProperty')
    virtual void handleGetProperties( const pcf::IndiProperty &ipRecv );
    /// Received a MESSAGE. a remote device sent a generic message,
    /// associated with a device or entire system.
    virtual void handleMessage( const pcf::IndiProperty &ipRecv );
    /// Received a NEW PROPERTY. This is a request to update one of the
    /// INDI properties we own.
    virtual void handleNewProperty( const pcf::IndiProperty &ipRecv );
    /// Received a SET PROPERTY. This is a notification telling us that a
    /// remote device changed one of its INDI properties.
    virtual void handleSetProperty( const pcf::IndiProperty &ipRecv );
    /// Called in the process loop to perform an action each time through.
    virtual void update();

    // Enables this device to send an email if an alarm is triggered.
    void enableAlarmMode( const bool &oEnable );
    // Enables the sending of outgoing messages, like 'SET', 'NEW', and 'DEF'.
    // If this is false no messages will be sent.
    void enableResponseMode( const bool & oEnable );
    // Turn on or off simulation mode. This can only be changed when this
    // device is not active.
    void enableSimulationMode( const bool &oEnable );
    // The interval between giving alarms for the same alarm condition (sec).
    unsigned int getAlarmInterval() const;
    // Return the path to where data files that are generated by this driver
    // should be saved.
    std::string getDataDirectory() const;
    // Return the list of email recipients in case an alarm needs to be sent.
    // This list is comma-separated.
    std::string getEmailList() const;
    // At what time was this object instantiated (constructor called)?
    pcf::TimeStamp getStartTime() const;
    // Are alarms being sent via email?
    bool isAlarmModeEnabled() const;
    // Once we have seen at least 1 'GET PROPERTIES' message, we can send
    // 'SET', 'NEW', and 'DEF', but not before.
    bool isResponseModeEnabled() const;
    // Is this device's data being simulated?
    bool isSimulationModeEnabled() const;

    /// Send an DEF property to a client. This is usually done in response
    /// to receiving a 'GetProperties' message. (see 'sendGetProperties')
    void sendDefProperty( const pcf::IndiProperty &ipSend ) const;
    void sendDefProperties( const std::vector<pcf::IndiProperty> &vecIpSend ) const;
    /// Send a DEL PROPERTY to a client. This tells a Client a given Property
    /// is no longer available. If the property only specifies
    /// a Device without a Name, the Client must assume all the Properties
    /// for that Device, and indeed the Device itself, are no longer available.
    void sendDelProperty( const pcf::IndiProperty &ipSend );
    void sendDelProperties( const std::vector<pcf::IndiProperty> &vecIpSend );
    /// Send an ENABLE BLOB. This behavior is only to be implemented in
    /// intermediate INDI server processes; individual devices shall
    /// disregard enableBLOB and send all elements at will.
    void sendEnableBLOB( const pcf::IndiProperty &ipSend );
    /// Send a GET PROPERTIES. When a Client first starts up, it begins
    /// by sending the getProperties command. This includes the protocol
    /// version and may include the name of a specific Device and Property
    /// if it is known by some other means. If no device is specified,
    /// then all devices are reported; if no name is specified,
    /// then all properties for the given device are reported. The Device
    /// then calls 'sendDefProperty' for each matching Property it offers
    /// for control, limited to the Properties of the specified Device if
    /// included.
    void sendGetProperties( const pcf::IndiProperty &ipSend );
    // Send a MESSAGE.
    void sendMessage( const pcf::IndiProperty &ipSend );
    // Send an SET PROPERTY. This is a notification that a property owned
    // by this device has changed.
    void sendSetProperty( const pcf::IndiProperty &ipSend ) const;
    void sendSetProperties( const std::vector<pcf::IndiProperty> &vecIpSend );

  // helper functions.
  private:
    /// Received a GET property, Respond with the properties the driver handles
    /// at a basic level. These properties are common to all drivers.
    bool handleDriverGetProperties( const pcf::IndiProperty &ipRecv );
    /// Received a NEW property, decide if it should be handled here. A remote
    /// device can send a property which can change the state of the driver at
    /// a basic level common to all drivers.
    bool handleDriverNewProperty( const pcf::IndiProperty &ipRecv );

  // Variables
  private:
    // This is a comma-separated list of email recipients.
    std::string m_szEmailList;
    // Where should any data files generated by this driver be saved?
    std::string m_szDataDirectory;
    // Are alarms enabled?
    bool m_oIsAlarmModeEnabled;
    // Can we send outgoing messages? This can only happen after we
    // have received at least 1 'getProperties'.
    bool m_oIsResponseModeEnabled;
    // Are we in simulation mode?
    bool m_oIsSimulationModeEnabled;
    // Are there any device-level alarms active?
    bool m_oIsAlarmActive;
    // How often do we send out an alarm (minutes)?
    unsigned int m_uiAlarmInterval;
    /// The time this program was started.
    pcf::TimeStamp m_tsStartTime;
    /// The last instant when the time was sent.
    pcf::TimeStamp m_tsLastSent;
    /// A property to handle the "uptime" message.
    pcf::IndiProperty m_ipUpTime;
}; // class IndiDriver
} // namespace pcf

////////////////////////////////////////////////////////////////////////////////

#endif // PCF_INDI_DRIVER_HPP
