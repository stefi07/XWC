// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SAVINGSTATECHANGE_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_SAVINGSTATECHANGE_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Saving_state_change_fb;
struct Saving_state_change_fbBuilder;

inline const ::flatbuffers::TypeTable *Saving_state_change_fbTypeTable();

struct Saving_state_change_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Saving_state_change_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Saving_state_change_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4,
    VT_FRAMENO = 6
  };
  int16_t state() const {
    return GetField<int16_t>(VT_STATE, 0);
  }
  uint64_t frameNo() const {
    return GetField<uint64_t>(VT_FRAMENO, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_STATE, 2) &&
           VerifyField<uint64_t>(verifier, VT_FRAMENO, 8) &&
           verifier.EndTable();
  }
};

struct Saving_state_change_fbBuilder {
  typedef Saving_state_change_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_state(int16_t state) {
    fbb_.AddElement<int16_t>(Saving_state_change_fb::VT_STATE, state, 0);
  }
  void add_frameNo(uint64_t frameNo) {
    fbb_.AddElement<uint64_t>(Saving_state_change_fb::VT_FRAMENO, frameNo, 0);
  }
  explicit Saving_state_change_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Saving_state_change_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Saving_state_change_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Saving_state_change_fb> CreateSaving_state_change_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t state = 0,
    uint64_t frameNo = 0) {
  Saving_state_change_fbBuilder builder_(_fbb);
  builder_.add_frameNo(frameNo);
  builder_.add_state(state);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *Saving_state_change_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SHORT, 0, -1 },
    { ::flatbuffers::ET_ULONG, 0, -1 }
  };
  static const char * const names[] = {
    "state",
    "frameNo"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Saving_state_change_fb *GetSaving_state_change_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Saving_state_change_fb>(buf);
}

inline const MagAOX::logger::Saving_state_change_fb *GetSizePrefixedSaving_state_change_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Saving_state_change_fb>(buf);
}

inline bool VerifySaving_state_change_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Saving_state_change_fb>(nullptr);
}

inline bool VerifySizePrefixedSaving_state_change_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Saving_state_change_fb>(nullptr);
}

inline void FinishSaving_state_change_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Saving_state_change_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSaving_state_change_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Saving_state_change_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_SAVINGSTATECHANGE_MAGAOX_LOGGER_H_
