// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TELEMTELPOS_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_TELEMTELPOS_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Telem_telpos_fb;
struct Telem_telpos_fbBuilder;

inline const ::flatbuffers::TypeTable *Telem_telpos_fbTypeTable();

struct Telem_telpos_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Telem_telpos_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Telem_telpos_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EPOCH = 4,
    VT_RA = 6,
    VT_DEC = 8,
    VT_EL = 10,
    VT_HA = 12,
    VT_AM = 14,
    VT_ROTOFF = 16
  };
  double epoch() const {
    return GetField<double>(VT_EPOCH, 0.0);
  }
  double ra() const {
    return GetField<double>(VT_RA, 0.0);
  }
  double dec() const {
    return GetField<double>(VT_DEC, 0.0);
  }
  double el() const {
    return GetField<double>(VT_EL, 0.0);
  }
  double ha() const {
    return GetField<double>(VT_HA, 0.0);
  }
  double am() const {
    return GetField<double>(VT_AM, 0.0);
  }
  double rotoff() const {
    return GetField<double>(VT_ROTOFF, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_EPOCH, 8) &&
           VerifyField<double>(verifier, VT_RA, 8) &&
           VerifyField<double>(verifier, VT_DEC, 8) &&
           VerifyField<double>(verifier, VT_EL, 8) &&
           VerifyField<double>(verifier, VT_HA, 8) &&
           VerifyField<double>(verifier, VT_AM, 8) &&
           VerifyField<double>(verifier, VT_ROTOFF, 8) &&
           verifier.EndTable();
  }
};

struct Telem_telpos_fbBuilder {
  typedef Telem_telpos_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_epoch(double epoch) {
    fbb_.AddElement<double>(Telem_telpos_fb::VT_EPOCH, epoch, 0.0);
  }
  void add_ra(double ra) {
    fbb_.AddElement<double>(Telem_telpos_fb::VT_RA, ra, 0.0);
  }
  void add_dec(double dec) {
    fbb_.AddElement<double>(Telem_telpos_fb::VT_DEC, dec, 0.0);
  }
  void add_el(double el) {
    fbb_.AddElement<double>(Telem_telpos_fb::VT_EL, el, 0.0);
  }
  void add_ha(double ha) {
    fbb_.AddElement<double>(Telem_telpos_fb::VT_HA, ha, 0.0);
  }
  void add_am(double am) {
    fbb_.AddElement<double>(Telem_telpos_fb::VT_AM, am, 0.0);
  }
  void add_rotoff(double rotoff) {
    fbb_.AddElement<double>(Telem_telpos_fb::VT_ROTOFF, rotoff, 0.0);
  }
  explicit Telem_telpos_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Telem_telpos_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Telem_telpos_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Telem_telpos_fb> CreateTelem_telpos_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double epoch = 0.0,
    double ra = 0.0,
    double dec = 0.0,
    double el = 0.0,
    double ha = 0.0,
    double am = 0.0,
    double rotoff = 0.0) {
  Telem_telpos_fbBuilder builder_(_fbb);
  builder_.add_rotoff(rotoff);
  builder_.add_am(am);
  builder_.add_ha(ha);
  builder_.add_el(el);
  builder_.add_dec(dec);
  builder_.add_ra(ra);
  builder_.add_epoch(epoch);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *Telem_telpos_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 }
  };
  static const char * const names[] = {
    "epoch",
    "ra",
    "dec",
    "el",
    "ha",
    "am",
    "rotoff"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 7, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Telem_telpos_fb *GetTelem_telpos_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Telem_telpos_fb>(buf);
}

inline const MagAOX::logger::Telem_telpos_fb *GetSizePrefixedTelem_telpos_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Telem_telpos_fb>(buf);
}

inline bool VerifyTelem_telpos_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Telem_telpos_fb>(nullptr);
}

inline bool VerifySizePrefixedTelem_telpos_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Telem_telpos_fb>(nullptr);
}

inline void FinishTelem_telpos_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_telpos_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTelem_telpos_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_telpos_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_TELEMTELPOS_MAGAOX_LOGGER_H_
