// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TELEMUSAGE_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_TELEMUSAGE_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Telem_usage_fb;
struct Telem_usage_fbBuilder;

inline const ::flatbuffers::TypeTable *Telem_usage_fbTypeTable();

struct Telem_usage_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Telem_usage_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Telem_usage_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RAMUSAGE = 4,
    VT_BOOTUSAGE = 6,
    VT_ROOTUSAGE = 8,
    VT_DATAUSAGE = 10
  };
  float ramUsage() const {
    return GetField<float>(VT_RAMUSAGE, 0.0f);
  }
  float bootUsage() const {
    return GetField<float>(VT_BOOTUSAGE, 0.0f);
  }
  float rootUsage() const {
    return GetField<float>(VT_ROOTUSAGE, 0.0f);
  }
  float dataUsage() const {
    return GetField<float>(VT_DATAUSAGE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_RAMUSAGE, 4) &&
           VerifyField<float>(verifier, VT_BOOTUSAGE, 4) &&
           VerifyField<float>(verifier, VT_ROOTUSAGE, 4) &&
           VerifyField<float>(verifier, VT_DATAUSAGE, 4) &&
           verifier.EndTable();
  }
};

struct Telem_usage_fbBuilder {
  typedef Telem_usage_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ramUsage(float ramUsage) {
    fbb_.AddElement<float>(Telem_usage_fb::VT_RAMUSAGE, ramUsage, 0.0f);
  }
  void add_bootUsage(float bootUsage) {
    fbb_.AddElement<float>(Telem_usage_fb::VT_BOOTUSAGE, bootUsage, 0.0f);
  }
  void add_rootUsage(float rootUsage) {
    fbb_.AddElement<float>(Telem_usage_fb::VT_ROOTUSAGE, rootUsage, 0.0f);
  }
  void add_dataUsage(float dataUsage) {
    fbb_.AddElement<float>(Telem_usage_fb::VT_DATAUSAGE, dataUsage, 0.0f);
  }
  explicit Telem_usage_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Telem_usage_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Telem_usage_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Telem_usage_fb> CreateTelem_usage_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float ramUsage = 0.0f,
    float bootUsage = 0.0f,
    float rootUsage = 0.0f,
    float dataUsage = 0.0f) {
  Telem_usage_fbBuilder builder_(_fbb);
  builder_.add_dataUsage(dataUsage);
  builder_.add_rootUsage(rootUsage);
  builder_.add_bootUsage(bootUsage);
  builder_.add_ramUsage(ramUsage);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *Telem_usage_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 0, -1 }
  };
  static const char * const names[] = {
    "ramUsage",
    "bootUsage",
    "rootUsage",
    "dataUsage"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 4, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Telem_usage_fb *GetTelem_usage_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Telem_usage_fb>(buf);
}

inline const MagAOX::logger::Telem_usage_fb *GetSizePrefixedTelem_usage_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Telem_usage_fb>(buf);
}

inline bool VerifyTelem_usage_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Telem_usage_fb>(nullptr);
}

inline bool VerifySizePrefixedTelem_usage_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Telem_usage_fb>(nullptr);
}

inline void FinishTelem_usage_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_usage_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTelem_usage_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_usage_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_TELEMUSAGE_MAGAOX_LOGGER_H_
