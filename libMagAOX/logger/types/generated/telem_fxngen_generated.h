// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TELEMFXNGEN_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_TELEMFXNGEN_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Telem_fxngen_fb;
struct Telem_fxngen_fbBuilder;

inline const ::flatbuffers::TypeTable *Telem_fxngen_fbTypeTable();

struct Telem_fxngen_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Telem_fxngen_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Telem_fxngen_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_C1OUTP = 4,
    VT_C1FREQ = 6,
    VT_C1VPP = 8,
    VT_C1OFST = 10,
    VT_C1PHSE = 12,
    VT_C1WVTP = 14,
    VT_C2OUTP = 16,
    VT_C2FREQ = 18,
    VT_C2VPP = 20,
    VT_C2OFST = 22,
    VT_C2PHSE = 24,
    VT_C2WVTP = 26,
    VT_C1SYNC = 28,
    VT_C2SYNC = 30,
    VT_C1WDTH = 32,
    VT_C2WDTH = 34
  };
  uint8_t C1outp() const {
    return GetField<uint8_t>(VT_C1OUTP, 0);
  }
  double C1freq() const {
    return GetField<double>(VT_C1FREQ, 0.0);
  }
  double C1vpp() const {
    return GetField<double>(VT_C1VPP, 0.0);
  }
  double C1ofst() const {
    return GetField<double>(VT_C1OFST, 0.0);
  }
  double C1phse() const {
    return GetField<double>(VT_C1PHSE, 0.0);
  }
  uint8_t C1wvtp() const {
    return GetField<uint8_t>(VT_C1WVTP, 0);
  }
  uint8_t C2outp() const {
    return GetField<uint8_t>(VT_C2OUTP, 0);
  }
  double C2freq() const {
    return GetField<double>(VT_C2FREQ, 0.0);
  }
  double C2vpp() const {
    return GetField<double>(VT_C2VPP, 0.0);
  }
  double C2ofst() const {
    return GetField<double>(VT_C2OFST, 0.0);
  }
  double C2phse() const {
    return GetField<double>(VT_C2PHSE, 0.0);
  }
  uint8_t C2wvtp() const {
    return GetField<uint8_t>(VT_C2WVTP, 0);
  }
  uint8_t C1sync() const {
    return GetField<uint8_t>(VT_C1SYNC, 0);
  }
  uint8_t C2sync() const {
    return GetField<uint8_t>(VT_C2SYNC, 0);
  }
  double C1wdth() const {
    return GetField<double>(VT_C1WDTH, 0.0);
  }
  double C2wdth() const {
    return GetField<double>(VT_C2WDTH, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_C1OUTP, 1) &&
           VerifyField<double>(verifier, VT_C1FREQ, 8) &&
           VerifyField<double>(verifier, VT_C1VPP, 8) &&
           VerifyField<double>(verifier, VT_C1OFST, 8) &&
           VerifyField<double>(verifier, VT_C1PHSE, 8) &&
           VerifyField<uint8_t>(verifier, VT_C1WVTP, 1) &&
           VerifyField<uint8_t>(verifier, VT_C2OUTP, 1) &&
           VerifyField<double>(verifier, VT_C2FREQ, 8) &&
           VerifyField<double>(verifier, VT_C2VPP, 8) &&
           VerifyField<double>(verifier, VT_C2OFST, 8) &&
           VerifyField<double>(verifier, VT_C2PHSE, 8) &&
           VerifyField<uint8_t>(verifier, VT_C2WVTP, 1) &&
           VerifyField<uint8_t>(verifier, VT_C1SYNC, 1) &&
           VerifyField<uint8_t>(verifier, VT_C2SYNC, 1) &&
           VerifyField<double>(verifier, VT_C1WDTH, 8) &&
           VerifyField<double>(verifier, VT_C2WDTH, 8) &&
           verifier.EndTable();
  }
};

struct Telem_fxngen_fbBuilder {
  typedef Telem_fxngen_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_C1outp(uint8_t C1outp) {
    fbb_.AddElement<uint8_t>(Telem_fxngen_fb::VT_C1OUTP, C1outp, 0);
  }
  void add_C1freq(double C1freq) {
    fbb_.AddElement<double>(Telem_fxngen_fb::VT_C1FREQ, C1freq, 0.0);
  }
  void add_C1vpp(double C1vpp) {
    fbb_.AddElement<double>(Telem_fxngen_fb::VT_C1VPP, C1vpp, 0.0);
  }
  void add_C1ofst(double C1ofst) {
    fbb_.AddElement<double>(Telem_fxngen_fb::VT_C1OFST, C1ofst, 0.0);
  }
  void add_C1phse(double C1phse) {
    fbb_.AddElement<double>(Telem_fxngen_fb::VT_C1PHSE, C1phse, 0.0);
  }
  void add_C1wvtp(uint8_t C1wvtp) {
    fbb_.AddElement<uint8_t>(Telem_fxngen_fb::VT_C1WVTP, C1wvtp, 0);
  }
  void add_C2outp(uint8_t C2outp) {
    fbb_.AddElement<uint8_t>(Telem_fxngen_fb::VT_C2OUTP, C2outp, 0);
  }
  void add_C2freq(double C2freq) {
    fbb_.AddElement<double>(Telem_fxngen_fb::VT_C2FREQ, C2freq, 0.0);
  }
  void add_C2vpp(double C2vpp) {
    fbb_.AddElement<double>(Telem_fxngen_fb::VT_C2VPP, C2vpp, 0.0);
  }
  void add_C2ofst(double C2ofst) {
    fbb_.AddElement<double>(Telem_fxngen_fb::VT_C2OFST, C2ofst, 0.0);
  }
  void add_C2phse(double C2phse) {
    fbb_.AddElement<double>(Telem_fxngen_fb::VT_C2PHSE, C2phse, 0.0);
  }
  void add_C2wvtp(uint8_t C2wvtp) {
    fbb_.AddElement<uint8_t>(Telem_fxngen_fb::VT_C2WVTP, C2wvtp, 0);
  }
  void add_C1sync(uint8_t C1sync) {
    fbb_.AddElement<uint8_t>(Telem_fxngen_fb::VT_C1SYNC, C1sync, 0);
  }
  void add_C2sync(uint8_t C2sync) {
    fbb_.AddElement<uint8_t>(Telem_fxngen_fb::VT_C2SYNC, C2sync, 0);
  }
  void add_C1wdth(double C1wdth) {
    fbb_.AddElement<double>(Telem_fxngen_fb::VT_C1WDTH, C1wdth, 0.0);
  }
  void add_C2wdth(double C2wdth) {
    fbb_.AddElement<double>(Telem_fxngen_fb::VT_C2WDTH, C2wdth, 0.0);
  }
  explicit Telem_fxngen_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Telem_fxngen_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Telem_fxngen_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Telem_fxngen_fb> CreateTelem_fxngen_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t C1outp = 0,
    double C1freq = 0.0,
    double C1vpp = 0.0,
    double C1ofst = 0.0,
    double C1phse = 0.0,
    uint8_t C1wvtp = 0,
    uint8_t C2outp = 0,
    double C2freq = 0.0,
    double C2vpp = 0.0,
    double C2ofst = 0.0,
    double C2phse = 0.0,
    uint8_t C2wvtp = 0,
    uint8_t C1sync = 0,
    uint8_t C2sync = 0,
    double C1wdth = 0.0,
    double C2wdth = 0.0) {
  Telem_fxngen_fbBuilder builder_(_fbb);
  builder_.add_C2wdth(C2wdth);
  builder_.add_C1wdth(C1wdth);
  builder_.add_C2phse(C2phse);
  builder_.add_C2ofst(C2ofst);
  builder_.add_C2vpp(C2vpp);
  builder_.add_C2freq(C2freq);
  builder_.add_C1phse(C1phse);
  builder_.add_C1ofst(C1ofst);
  builder_.add_C1vpp(C1vpp);
  builder_.add_C1freq(C1freq);
  builder_.add_C2sync(C2sync);
  builder_.add_C1sync(C1sync);
  builder_.add_C2wvtp(C2wvtp);
  builder_.add_C2outp(C2outp);
  builder_.add_C1wvtp(C1wvtp);
  builder_.add_C1outp(C1outp);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *Telem_fxngen_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_UCHAR, 0, -1 },
    { ::flatbuffers::ET_UCHAR, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_UCHAR, 0, -1 },
    { ::flatbuffers::ET_UCHAR, 0, -1 },
    { ::flatbuffers::ET_UCHAR, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 }
  };
  static const char * const names[] = {
    "C1outp",
    "C1freq",
    "C1vpp",
    "C1ofst",
    "C1phse",
    "C1wvtp",
    "C2outp",
    "C2freq",
    "C2vpp",
    "C2ofst",
    "C2phse",
    "C2wvtp",
    "C1sync",
    "C2sync",
    "C1wdth",
    "C2wdth"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 16, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Telem_fxngen_fb *GetTelem_fxngen_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Telem_fxngen_fb>(buf);
}

inline const MagAOX::logger::Telem_fxngen_fb *GetSizePrefixedTelem_fxngen_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Telem_fxngen_fb>(buf);
}

inline bool VerifyTelem_fxngen_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Telem_fxngen_fb>(nullptr);
}

inline bool VerifySizePrefixedTelem_fxngen_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Telem_fxngen_fb>(nullptr);
}

inline void FinishTelem_fxngen_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_fxngen_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTelem_fxngen_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_fxngen_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_TELEMFXNGEN_MAGAOX_LOGGER_H_
