// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TELEMDMSPECK_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_TELEMDMSPECK_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Telem_dmspeck_fb;
struct Telem_dmspeck_fbBuilder;

inline const ::flatbuffers::TypeTable *Telem_dmspeck_fbTypeTable();

struct Telem_dmspeck_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Telem_dmspeck_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Telem_dmspeck_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MODULATING = 4,
    VT_TRIGGER = 6,
    VT_FREQUENCY = 8,
    VT_SEPARATIONS = 10,
    VT_ANGLES = 12,
    VT_AMPLITUDES = 14,
    VT_CROSSES = 16
  };
  /// whether or not the speckle is being modulated
  bool modulating() const {
    return GetField<uint8_t>(VT_MODULATING, 0) != 0;
  }
  /// whether or not the speckle is being triggered
  bool trigger() const {
    return GetField<uint8_t>(VT_TRIGGER, 0) != 0;
  }
  /// frequency of modulation is not triggered
  float frequency() const {
    return GetField<float>(VT_FREQUENCY, 0.0f);
  }
  /// the separations of the speckle(s)
  const ::flatbuffers::Vector<float> *separations() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_SEPARATIONS);
  }
  /// the angles of the speckle(s)
  const ::flatbuffers::Vector<float> *angles() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_ANGLES);
  }
  /// the amplitudes of the speckle(s)
  const ::flatbuffers::Vector<float> *amplitudes() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_AMPLITUDES);
  }
  /// whether or not the cross speckle(s) are produced
  const ::flatbuffers::Vector<uint8_t> *crosses() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_CROSSES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MODULATING, 1) &&
           VerifyField<uint8_t>(verifier, VT_TRIGGER, 1) &&
           VerifyField<float>(verifier, VT_FREQUENCY, 4) &&
           VerifyOffset(verifier, VT_SEPARATIONS) &&
           verifier.VerifyVector(separations()) &&
           VerifyOffset(verifier, VT_ANGLES) &&
           verifier.VerifyVector(angles()) &&
           VerifyOffset(verifier, VT_AMPLITUDES) &&
           verifier.VerifyVector(amplitudes()) &&
           VerifyOffset(verifier, VT_CROSSES) &&
           verifier.VerifyVector(crosses()) &&
           verifier.EndTable();
  }
};

struct Telem_dmspeck_fbBuilder {
  typedef Telem_dmspeck_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_modulating(bool modulating) {
    fbb_.AddElement<uint8_t>(Telem_dmspeck_fb::VT_MODULATING, static_cast<uint8_t>(modulating), 0);
  }
  void add_trigger(bool trigger) {
    fbb_.AddElement<uint8_t>(Telem_dmspeck_fb::VT_TRIGGER, static_cast<uint8_t>(trigger), 0);
  }
  void add_frequency(float frequency) {
    fbb_.AddElement<float>(Telem_dmspeck_fb::VT_FREQUENCY, frequency, 0.0f);
  }
  void add_separations(::flatbuffers::Offset<::flatbuffers::Vector<float>> separations) {
    fbb_.AddOffset(Telem_dmspeck_fb::VT_SEPARATIONS, separations);
  }
  void add_angles(::flatbuffers::Offset<::flatbuffers::Vector<float>> angles) {
    fbb_.AddOffset(Telem_dmspeck_fb::VT_ANGLES, angles);
  }
  void add_amplitudes(::flatbuffers::Offset<::flatbuffers::Vector<float>> amplitudes) {
    fbb_.AddOffset(Telem_dmspeck_fb::VT_AMPLITUDES, amplitudes);
  }
  void add_crosses(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> crosses) {
    fbb_.AddOffset(Telem_dmspeck_fb::VT_CROSSES, crosses);
  }
  explicit Telem_dmspeck_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Telem_dmspeck_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Telem_dmspeck_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Telem_dmspeck_fb> CreateTelem_dmspeck_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool modulating = false,
    bool trigger = false,
    float frequency = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> separations = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> angles = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> amplitudes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> crosses = 0) {
  Telem_dmspeck_fbBuilder builder_(_fbb);
  builder_.add_crosses(crosses);
  builder_.add_amplitudes(amplitudes);
  builder_.add_angles(angles);
  builder_.add_separations(separations);
  builder_.add_frequency(frequency);
  builder_.add_trigger(trigger);
  builder_.add_modulating(modulating);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Telem_dmspeck_fb> CreateTelem_dmspeck_fbDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool modulating = false,
    bool trigger = false,
    float frequency = 0.0f,
    const std::vector<float> *separations = nullptr,
    const std::vector<float> *angles = nullptr,
    const std::vector<float> *amplitudes = nullptr,
    const std::vector<uint8_t> *crosses = nullptr) {
  auto separations__ = separations ? _fbb.CreateVector<float>(*separations) : 0;
  auto angles__ = angles ? _fbb.CreateVector<float>(*angles) : 0;
  auto amplitudes__ = amplitudes ? _fbb.CreateVector<float>(*amplitudes) : 0;
  auto crosses__ = crosses ? _fbb.CreateVector<uint8_t>(*crosses) : 0;
  return MagAOX::logger::CreateTelem_dmspeck_fb(
      _fbb,
      modulating,
      trigger,
      frequency,
      separations__,
      angles__,
      amplitudes__,
      crosses__);
}

inline const ::flatbuffers::TypeTable *Telem_dmspeck_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 1, -1 },
    { ::flatbuffers::ET_FLOAT, 1, -1 },
    { ::flatbuffers::ET_FLOAT, 1, -1 },
    { ::flatbuffers::ET_BOOL, 1, -1 }
  };
  static const char * const names[] = {
    "modulating",
    "trigger",
    "frequency",
    "separations",
    "angles",
    "amplitudes",
    "crosses"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 7, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Telem_dmspeck_fb *GetTelem_dmspeck_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Telem_dmspeck_fb>(buf);
}

inline const MagAOX::logger::Telem_dmspeck_fb *GetSizePrefixedTelem_dmspeck_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Telem_dmspeck_fb>(buf);
}

inline bool VerifyTelem_dmspeck_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Telem_dmspeck_fb>(nullptr);
}

inline bool VerifySizePrefixedTelem_dmspeck_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Telem_dmspeck_fb>(nullptr);
}

inline void FinishTelem_dmspeck_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_dmspeck_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTelem_dmspeck_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_dmspeck_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_TELEMDMSPECK_MAGAOX_LOGGER_H_
