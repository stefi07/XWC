// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SOFTWARELOG_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_SOFTWARELOG_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Software_log_fb;
struct Software_log_fbBuilder;

inline const ::flatbuffers::TypeTable *Software_log_fbTypeTable();

struct Software_log_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Software_log_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Software_log_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FILE = 4,
    VT_LINE = 6,
    VT_ERRNOCODE = 8,
    VT_OTHERCODE = 10,
    VT_EXPLANATION = 12
  };
  const ::flatbuffers::String *file() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FILE);
  }
  uint32_t line() const {
    return GetField<uint32_t>(VT_LINE, 0);
  }
  int32_t errnoCode() const {
    return GetField<int32_t>(VT_ERRNOCODE, 0);
  }
  int32_t otherCode() const {
    return GetField<int32_t>(VT_OTHERCODE, 0);
  }
  const ::flatbuffers::String *explanation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXPLANATION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FILE) &&
           verifier.VerifyString(file()) &&
           VerifyField<uint32_t>(verifier, VT_LINE, 4) &&
           VerifyField<int32_t>(verifier, VT_ERRNOCODE, 4) &&
           VerifyField<int32_t>(verifier, VT_OTHERCODE, 4) &&
           VerifyOffset(verifier, VT_EXPLANATION) &&
           verifier.VerifyString(explanation()) &&
           verifier.EndTable();
  }
};

struct Software_log_fbBuilder {
  typedef Software_log_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_file(::flatbuffers::Offset<::flatbuffers::String> file) {
    fbb_.AddOffset(Software_log_fb::VT_FILE, file);
  }
  void add_line(uint32_t line) {
    fbb_.AddElement<uint32_t>(Software_log_fb::VT_LINE, line, 0);
  }
  void add_errnoCode(int32_t errnoCode) {
    fbb_.AddElement<int32_t>(Software_log_fb::VT_ERRNOCODE, errnoCode, 0);
  }
  void add_otherCode(int32_t otherCode) {
    fbb_.AddElement<int32_t>(Software_log_fb::VT_OTHERCODE, otherCode, 0);
  }
  void add_explanation(::flatbuffers::Offset<::flatbuffers::String> explanation) {
    fbb_.AddOffset(Software_log_fb::VT_EXPLANATION, explanation);
  }
  explicit Software_log_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Software_log_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Software_log_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Software_log_fb> CreateSoftware_log_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> file = 0,
    uint32_t line = 0,
    int32_t errnoCode = 0,
    int32_t otherCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> explanation = 0) {
  Software_log_fbBuilder builder_(_fbb);
  builder_.add_explanation(explanation);
  builder_.add_otherCode(otherCode);
  builder_.add_errnoCode(errnoCode);
  builder_.add_line(line);
  builder_.add_file(file);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Software_log_fb> CreateSoftware_log_fbDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *file = nullptr,
    uint32_t line = 0,
    int32_t errnoCode = 0,
    int32_t otherCode = 0,
    const char *explanation = nullptr) {
  auto file__ = file ? _fbb.CreateString(file) : 0;
  auto explanation__ = explanation ? _fbb.CreateString(explanation) : 0;
  return MagAOX::logger::CreateSoftware_log_fb(
      _fbb,
      file__,
      line,
      errnoCode,
      otherCode,
      explanation__);
}

inline const ::flatbuffers::TypeTable *Software_log_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_UINT, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "file",
    "line",
    "errnoCode",
    "otherCode",
    "explanation"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 5, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Software_log_fb *GetSoftware_log_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Software_log_fb>(buf);
}

inline const MagAOX::logger::Software_log_fb *GetSizePrefixedSoftware_log_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Software_log_fb>(buf);
}

inline bool VerifySoftware_log_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Software_log_fb>(nullptr);
}

inline bool VerifySizePrefixedSoftware_log_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Software_log_fb>(nullptr);
}

inline void FinishSoftware_log_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Software_log_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSoftware_log_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Software_log_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_SOFTWARELOG_MAGAOX_LOGGER_H_
