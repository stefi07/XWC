// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TELEMBLOCKGAINS_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_TELEMBLOCKGAINS_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Telem_blockgains_fb;
struct Telem_blockgains_fbBuilder;

inline const ::flatbuffers::TypeTable *Telem_blockgains_fbTypeTable();

struct Telem_blockgains_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Telem_blockgains_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Telem_blockgains_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GAINS = 4,
    VT_GAINS_CONSTANT = 6,
    VT_MCS = 8,
    VT_MCS_CONSTANT = 10,
    VT_LIMS = 12,
    VT_LIMS_CONSTANT = 14
  };
  const ::flatbuffers::Vector<float> *gains() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_GAINS);
  }
  const ::flatbuffers::Vector<uint8_t> *gains_constant() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_GAINS_CONSTANT);
  }
  const ::flatbuffers::Vector<float> *mcs() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_MCS);
  }
  const ::flatbuffers::Vector<uint8_t> *mcs_constant() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_MCS_CONSTANT);
  }
  const ::flatbuffers::Vector<float> *lims() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_LIMS);
  }
  const ::flatbuffers::Vector<uint8_t> *lims_constant() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_LIMS_CONSTANT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GAINS) &&
           verifier.VerifyVector(gains()) &&
           VerifyOffset(verifier, VT_GAINS_CONSTANT) &&
           verifier.VerifyVector(gains_constant()) &&
           VerifyOffset(verifier, VT_MCS) &&
           verifier.VerifyVector(mcs()) &&
           VerifyOffset(verifier, VT_MCS_CONSTANT) &&
           verifier.VerifyVector(mcs_constant()) &&
           VerifyOffset(verifier, VT_LIMS) &&
           verifier.VerifyVector(lims()) &&
           VerifyOffset(verifier, VT_LIMS_CONSTANT) &&
           verifier.VerifyVector(lims_constant()) &&
           verifier.EndTable();
  }
};

struct Telem_blockgains_fbBuilder {
  typedef Telem_blockgains_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_gains(::flatbuffers::Offset<::flatbuffers::Vector<float>> gains) {
    fbb_.AddOffset(Telem_blockgains_fb::VT_GAINS, gains);
  }
  void add_gains_constant(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> gains_constant) {
    fbb_.AddOffset(Telem_blockgains_fb::VT_GAINS_CONSTANT, gains_constant);
  }
  void add_mcs(::flatbuffers::Offset<::flatbuffers::Vector<float>> mcs) {
    fbb_.AddOffset(Telem_blockgains_fb::VT_MCS, mcs);
  }
  void add_mcs_constant(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> mcs_constant) {
    fbb_.AddOffset(Telem_blockgains_fb::VT_MCS_CONSTANT, mcs_constant);
  }
  void add_lims(::flatbuffers::Offset<::flatbuffers::Vector<float>> lims) {
    fbb_.AddOffset(Telem_blockgains_fb::VT_LIMS, lims);
  }
  void add_lims_constant(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> lims_constant) {
    fbb_.AddOffset(Telem_blockgains_fb::VT_LIMS_CONSTANT, lims_constant);
  }
  explicit Telem_blockgains_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Telem_blockgains_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Telem_blockgains_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Telem_blockgains_fb> CreateTelem_blockgains_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> gains = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> gains_constant = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> mcs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> mcs_constant = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> lims = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> lims_constant = 0) {
  Telem_blockgains_fbBuilder builder_(_fbb);
  builder_.add_lims_constant(lims_constant);
  builder_.add_lims(lims);
  builder_.add_mcs_constant(mcs_constant);
  builder_.add_mcs(mcs);
  builder_.add_gains_constant(gains_constant);
  builder_.add_gains(gains);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Telem_blockgains_fb> CreateTelem_blockgains_fbDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *gains = nullptr,
    const std::vector<uint8_t> *gains_constant = nullptr,
    const std::vector<float> *mcs = nullptr,
    const std::vector<uint8_t> *mcs_constant = nullptr,
    const std::vector<float> *lims = nullptr,
    const std::vector<uint8_t> *lims_constant = nullptr) {
  auto gains__ = gains ? _fbb.CreateVector<float>(*gains) : 0;
  auto gains_constant__ = gains_constant ? _fbb.CreateVector<uint8_t>(*gains_constant) : 0;
  auto mcs__ = mcs ? _fbb.CreateVector<float>(*mcs) : 0;
  auto mcs_constant__ = mcs_constant ? _fbb.CreateVector<uint8_t>(*mcs_constant) : 0;
  auto lims__ = lims ? _fbb.CreateVector<float>(*lims) : 0;
  auto lims_constant__ = lims_constant ? _fbb.CreateVector<uint8_t>(*lims_constant) : 0;
  return MagAOX::logger::CreateTelem_blockgains_fb(
      _fbb,
      gains__,
      gains_constant__,
      mcs__,
      mcs_constant__,
      lims__,
      lims_constant__);
}

inline const ::flatbuffers::TypeTable *Telem_blockgains_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_FLOAT, 1, -1 },
    { ::flatbuffers::ET_UCHAR, 1, -1 },
    { ::flatbuffers::ET_FLOAT, 1, -1 },
    { ::flatbuffers::ET_UCHAR, 1, -1 },
    { ::flatbuffers::ET_FLOAT, 1, -1 },
    { ::flatbuffers::ET_UCHAR, 1, -1 }
  };
  static const char * const names[] = {
    "gains",
    "gains_constant",
    "mcs",
    "mcs_constant",
    "lims",
    "lims_constant"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 6, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Telem_blockgains_fb *GetTelem_blockgains_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Telem_blockgains_fb>(buf);
}

inline const MagAOX::logger::Telem_blockgains_fb *GetSizePrefixedTelem_blockgains_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Telem_blockgains_fb>(buf);
}

inline bool VerifyTelem_blockgains_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Telem_blockgains_fb>(nullptr);
}

inline bool VerifySizePrefixedTelem_blockgains_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Telem_blockgains_fb>(nullptr);
}

inline void FinishTelem_blockgains_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_blockgains_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTelem_blockgains_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_blockgains_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_TELEMBLOCKGAINS_MAGAOX_LOGGER_H_
