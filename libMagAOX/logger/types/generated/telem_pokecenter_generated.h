// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TELEMPOKECENTER_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_TELEMPOKECENTER_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Telem_pokecenter_fb;
struct Telem_pokecenter_fbBuilder;

inline const ::flatbuffers::TypeTable *Telem_pokecenter_fbTypeTable();

struct Telem_pokecenter_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Telem_pokecenter_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Telem_pokecenter_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MEASURING = 4,
    VT_PUPIL_X = 6,
    VT_PUPIL_Y = 8,
    VT_POKE_X = 10,
    VT_POKE_Y = 12
  };
  uint8_t measuring() const {
    return GetField<uint8_t>(VT_MEASURING, 0);
  }
  float pupil_x() const {
    return GetField<float>(VT_PUPIL_X, 0.0f);
  }
  float pupil_y() const {
    return GetField<float>(VT_PUPIL_Y, 0.0f);
  }
  const ::flatbuffers::Vector<float> *poke_x() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_POKE_X);
  }
  const ::flatbuffers::Vector<float> *poke_y() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_POKE_Y);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MEASURING, 1) &&
           VerifyField<float>(verifier, VT_PUPIL_X, 4) &&
           VerifyField<float>(verifier, VT_PUPIL_Y, 4) &&
           VerifyOffset(verifier, VT_POKE_X) &&
           verifier.VerifyVector(poke_x()) &&
           VerifyOffset(verifier, VT_POKE_Y) &&
           verifier.VerifyVector(poke_y()) &&
           verifier.EndTable();
  }
};

struct Telem_pokecenter_fbBuilder {
  typedef Telem_pokecenter_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_measuring(uint8_t measuring) {
    fbb_.AddElement<uint8_t>(Telem_pokecenter_fb::VT_MEASURING, measuring, 0);
  }
  void add_pupil_x(float pupil_x) {
    fbb_.AddElement<float>(Telem_pokecenter_fb::VT_PUPIL_X, pupil_x, 0.0f);
  }
  void add_pupil_y(float pupil_y) {
    fbb_.AddElement<float>(Telem_pokecenter_fb::VT_PUPIL_Y, pupil_y, 0.0f);
  }
  void add_poke_x(::flatbuffers::Offset<::flatbuffers::Vector<float>> poke_x) {
    fbb_.AddOffset(Telem_pokecenter_fb::VT_POKE_X, poke_x);
  }
  void add_poke_y(::flatbuffers::Offset<::flatbuffers::Vector<float>> poke_y) {
    fbb_.AddOffset(Telem_pokecenter_fb::VT_POKE_Y, poke_y);
  }
  explicit Telem_pokecenter_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Telem_pokecenter_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Telem_pokecenter_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Telem_pokecenter_fb> CreateTelem_pokecenter_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t measuring = 0,
    float pupil_x = 0.0f,
    float pupil_y = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> poke_x = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> poke_y = 0) {
  Telem_pokecenter_fbBuilder builder_(_fbb);
  builder_.add_poke_y(poke_y);
  builder_.add_poke_x(poke_x);
  builder_.add_pupil_y(pupil_y);
  builder_.add_pupil_x(pupil_x);
  builder_.add_measuring(measuring);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Telem_pokecenter_fb> CreateTelem_pokecenter_fbDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t measuring = 0,
    float pupil_x = 0.0f,
    float pupil_y = 0.0f,
    const std::vector<float> *poke_x = nullptr,
    const std::vector<float> *poke_y = nullptr) {
  auto poke_x__ = poke_x ? _fbb.CreateVector<float>(*poke_x) : 0;
  auto poke_y__ = poke_y ? _fbb.CreateVector<float>(*poke_y) : 0;
  return MagAOX::logger::CreateTelem_pokecenter_fb(
      _fbb,
      measuring,
      pupil_x,
      pupil_y,
      poke_x__,
      poke_y__);
}

inline const ::flatbuffers::TypeTable *Telem_pokecenter_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 1, -1 },
    { ::flatbuffers::ET_FLOAT, 1, -1 }
  };
  static const char * const names[] = {
    "measuring",
    "pupil_x",
    "pupil_y",
    "poke_x",
    "poke_y"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 5, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Telem_pokecenter_fb *GetTelem_pokecenter_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Telem_pokecenter_fb>(buf);
}

inline const MagAOX::logger::Telem_pokecenter_fb *GetSizePrefixedTelem_pokecenter_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Telem_pokecenter_fb>(buf);
}

inline bool VerifyTelem_pokecenter_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Telem_pokecenter_fb>(nullptr);
}

inline bool VerifySizePrefixedTelem_pokecenter_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Telem_pokecenter_fb>(nullptr);
}

inline void FinishTelem_pokecenter_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_pokecenter_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTelem_pokecenter_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_pokecenter_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_TELEMPOKECENTER_MAGAOX_LOGGER_H_
