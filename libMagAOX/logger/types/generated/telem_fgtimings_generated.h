// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TELEMFGTIMINGS_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_TELEMFGTIMINGS_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Telem_fgtimings_fb;
struct Telem_fgtimings_fbBuilder;

inline const ::flatbuffers::TypeTable *Telem_fgtimings_fbTypeTable();

struct Telem_fgtimings_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Telem_fgtimings_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Telem_fgtimings_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ATIME = 4,
    VT_ATIME_JITTER = 6,
    VT_WTIME = 8,
    VT_WTIME_JITTER = 10,
    VT_WMATIME = 12,
    VT_WMATIME_JITTER = 14
  };
  double atime() const {
    return GetField<double>(VT_ATIME, 0.0);
  }
  double atime_jitter() const {
    return GetField<double>(VT_ATIME_JITTER, 0.0);
  }
  double wtime() const {
    return GetField<double>(VT_WTIME, 0.0);
  }
  double wtime_jitter() const {
    return GetField<double>(VT_WTIME_JITTER, 0.0);
  }
  double wmatime() const {
    return GetField<double>(VT_WMATIME, 0.0);
  }
  double wmatime_jitter() const {
    return GetField<double>(VT_WMATIME_JITTER, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_ATIME, 8) &&
           VerifyField<double>(verifier, VT_ATIME_JITTER, 8) &&
           VerifyField<double>(verifier, VT_WTIME, 8) &&
           VerifyField<double>(verifier, VT_WTIME_JITTER, 8) &&
           VerifyField<double>(verifier, VT_WMATIME, 8) &&
           VerifyField<double>(verifier, VT_WMATIME_JITTER, 8) &&
           verifier.EndTable();
  }
};

struct Telem_fgtimings_fbBuilder {
  typedef Telem_fgtimings_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_atime(double atime) {
    fbb_.AddElement<double>(Telem_fgtimings_fb::VT_ATIME, atime, 0.0);
  }
  void add_atime_jitter(double atime_jitter) {
    fbb_.AddElement<double>(Telem_fgtimings_fb::VT_ATIME_JITTER, atime_jitter, 0.0);
  }
  void add_wtime(double wtime) {
    fbb_.AddElement<double>(Telem_fgtimings_fb::VT_WTIME, wtime, 0.0);
  }
  void add_wtime_jitter(double wtime_jitter) {
    fbb_.AddElement<double>(Telem_fgtimings_fb::VT_WTIME_JITTER, wtime_jitter, 0.0);
  }
  void add_wmatime(double wmatime) {
    fbb_.AddElement<double>(Telem_fgtimings_fb::VT_WMATIME, wmatime, 0.0);
  }
  void add_wmatime_jitter(double wmatime_jitter) {
    fbb_.AddElement<double>(Telem_fgtimings_fb::VT_WMATIME_JITTER, wmatime_jitter, 0.0);
  }
  explicit Telem_fgtimings_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Telem_fgtimings_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Telem_fgtimings_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Telem_fgtimings_fb> CreateTelem_fgtimings_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double atime = 0.0,
    double atime_jitter = 0.0,
    double wtime = 0.0,
    double wtime_jitter = 0.0,
    double wmatime = 0.0,
    double wmatime_jitter = 0.0) {
  Telem_fgtimings_fbBuilder builder_(_fbb);
  builder_.add_wmatime_jitter(wmatime_jitter);
  builder_.add_wmatime(wmatime);
  builder_.add_wtime_jitter(wtime_jitter);
  builder_.add_wtime(wtime);
  builder_.add_atime_jitter(atime_jitter);
  builder_.add_atime(atime);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *Telem_fgtimings_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 }
  };
  static const char * const names[] = {
    "atime",
    "atime_jitter",
    "wtime",
    "wtime_jitter",
    "wmatime",
    "wmatime_jitter"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 6, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Telem_fgtimings_fb *GetTelem_fgtimings_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Telem_fgtimings_fb>(buf);
}

inline const MagAOX::logger::Telem_fgtimings_fb *GetSizePrefixedTelem_fgtimings_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Telem_fgtimings_fb>(buf);
}

inline bool VerifyTelem_fgtimings_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Telem_fgtimings_fb>(nullptr);
}

inline bool VerifySizePrefixedTelem_fgtimings_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Telem_fgtimings_fb>(nullptr);
}

inline void FinishTelem_fgtimings_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_fgtimings_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTelem_fgtimings_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_fgtimings_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_TELEMFGTIMINGS_MAGAOX_LOGGER_H_
