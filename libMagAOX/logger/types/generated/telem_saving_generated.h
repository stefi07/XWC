// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TELEMSAVING_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_TELEMSAVING_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct telem_saving_fb;
struct telem_saving_fbBuilder;

inline const ::flatbuffers::TypeTable *telem_saving_fbTypeTable();

struct telem_saving_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef telem_saving_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return telem_saving_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RAWSIZE = 4,
    VT_COMPRESSEDSIZE = 6,
    VT_ENCODE_RATE = 8,
    VT_DIFFERENCE_RATE = 10,
    VT_REORDER_RATE = 12,
    VT_COMPRESS_RATE = 14
  };
  uint32_t rawSize() const {
    return GetField<uint32_t>(VT_RAWSIZE, 0);
  }
  uint32_t compressedSize() const {
    return GetField<uint32_t>(VT_COMPRESSEDSIZE, 0);
  }
  float encode_rate() const {
    return GetField<float>(VT_ENCODE_RATE, 0.0f);
  }
  float difference_rate() const {
    return GetField<float>(VT_DIFFERENCE_RATE, 0.0f);
  }
  float reorder_rate() const {
    return GetField<float>(VT_REORDER_RATE, 0.0f);
  }
  float compress_rate() const {
    return GetField<float>(VT_COMPRESS_RATE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_RAWSIZE, 4) &&
           VerifyField<uint32_t>(verifier, VT_COMPRESSEDSIZE, 4) &&
           VerifyField<float>(verifier, VT_ENCODE_RATE, 4) &&
           VerifyField<float>(verifier, VT_DIFFERENCE_RATE, 4) &&
           VerifyField<float>(verifier, VT_REORDER_RATE, 4) &&
           VerifyField<float>(verifier, VT_COMPRESS_RATE, 4) &&
           verifier.EndTable();
  }
};

struct telem_saving_fbBuilder {
  typedef telem_saving_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_rawSize(uint32_t rawSize) {
    fbb_.AddElement<uint32_t>(telem_saving_fb::VT_RAWSIZE, rawSize, 0);
  }
  void add_compressedSize(uint32_t compressedSize) {
    fbb_.AddElement<uint32_t>(telem_saving_fb::VT_COMPRESSEDSIZE, compressedSize, 0);
  }
  void add_encode_rate(float encode_rate) {
    fbb_.AddElement<float>(telem_saving_fb::VT_ENCODE_RATE, encode_rate, 0.0f);
  }
  void add_difference_rate(float difference_rate) {
    fbb_.AddElement<float>(telem_saving_fb::VT_DIFFERENCE_RATE, difference_rate, 0.0f);
  }
  void add_reorder_rate(float reorder_rate) {
    fbb_.AddElement<float>(telem_saving_fb::VT_REORDER_RATE, reorder_rate, 0.0f);
  }
  void add_compress_rate(float compress_rate) {
    fbb_.AddElement<float>(telem_saving_fb::VT_COMPRESS_RATE, compress_rate, 0.0f);
  }
  explicit telem_saving_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<telem_saving_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<telem_saving_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<telem_saving_fb> Createtelem_saving_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t rawSize = 0,
    uint32_t compressedSize = 0,
    float encode_rate = 0.0f,
    float difference_rate = 0.0f,
    float reorder_rate = 0.0f,
    float compress_rate = 0.0f) {
  telem_saving_fbBuilder builder_(_fbb);
  builder_.add_compress_rate(compress_rate);
  builder_.add_reorder_rate(reorder_rate);
  builder_.add_difference_rate(difference_rate);
  builder_.add_encode_rate(encode_rate);
  builder_.add_compressedSize(compressedSize);
  builder_.add_rawSize(rawSize);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *telem_saving_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UINT, 0, -1 },
    { ::flatbuffers::ET_UINT, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 0, -1 }
  };
  static const char * const names[] = {
    "rawSize",
    "compressedSize",
    "encode_rate",
    "difference_rate",
    "reorder_rate",
    "compress_rate"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 6, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::telem_saving_fb *Gettelem_saving_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::telem_saving_fb>(buf);
}

inline const MagAOX::logger::telem_saving_fb *GetSizePrefixedtelem_saving_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::telem_saving_fb>(buf);
}

inline bool Verifytelem_saving_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::telem_saving_fb>(nullptr);
}

inline bool VerifySizePrefixedtelem_saving_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::telem_saving_fb>(nullptr);
}

inline void Finishtelem_saving_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::telem_saving_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedtelem_saving_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::telem_saving_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_TELEMSAVING_MAGAOX_LOGGER_H_
