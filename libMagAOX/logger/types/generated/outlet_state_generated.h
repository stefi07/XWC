// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OUTLETSTATE_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_OUTLETSTATE_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Outlet_state_fb;
struct Outlet_state_fbBuilder;

inline const ::flatbuffers::TypeTable *Outlet_state_fbTypeTable();

struct Outlet_state_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Outlet_state_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Outlet_state_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OUTLET = 4,
    VT_STATE = 6
  };
  uint8_t outlet() const {
    return GetField<uint8_t>(VT_OUTLET, 0);
  }
  uint8_t state() const {
    return GetField<uint8_t>(VT_STATE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_OUTLET, 1) &&
           VerifyField<uint8_t>(verifier, VT_STATE, 1) &&
           verifier.EndTable();
  }
};

struct Outlet_state_fbBuilder {
  typedef Outlet_state_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_outlet(uint8_t outlet) {
    fbb_.AddElement<uint8_t>(Outlet_state_fb::VT_OUTLET, outlet, 0);
  }
  void add_state(uint8_t state) {
    fbb_.AddElement<uint8_t>(Outlet_state_fb::VT_STATE, state, 0);
  }
  explicit Outlet_state_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Outlet_state_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Outlet_state_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Outlet_state_fb> CreateOutlet_state_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t outlet = 0,
    uint8_t state = 0) {
  Outlet_state_fbBuilder builder_(_fbb);
  builder_.add_state(state);
  builder_.add_outlet(outlet);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *Outlet_state_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 0, -1 },
    { ::flatbuffers::ET_UCHAR, 0, -1 }
  };
  static const char * const names[] = {
    "outlet",
    "state"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Outlet_state_fb *GetOutlet_state_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Outlet_state_fb>(buf);
}

inline const MagAOX::logger::Outlet_state_fb *GetSizePrefixedOutlet_state_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Outlet_state_fb>(buf);
}

inline bool VerifyOutlet_state_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Outlet_state_fb>(nullptr);
}

inline bool VerifySizePrefixedOutlet_state_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Outlet_state_fb>(nullptr);
}

inline void FinishOutlet_state_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Outlet_state_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedOutlet_state_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Outlet_state_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_OUTLETSTATE_MAGAOX_LOGGER_H_
