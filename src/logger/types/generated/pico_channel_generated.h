// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PICOCHANNEL_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_PICOCHANNEL_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Pico_channel_fb;
struct Pico_channel_fbBuilder;

inline const ::flatbuffers::TypeTable *Pico_channel_fbTypeTable();

struct Pico_channel_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Pico_channel_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Pico_channel_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_CHANNEL = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  uint8_t channel() const {
    return GetField<uint8_t>(VT_CHANNEL, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_CHANNEL, 1) &&
           verifier.EndTable();
  }
};

struct Pico_channel_fbBuilder {
  typedef Pico_channel_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Pico_channel_fb::VT_NAME, name);
  }
  void add_channel(uint8_t channel) {
    fbb_.AddElement<uint8_t>(Pico_channel_fb::VT_CHANNEL, channel, 0);
  }
  explicit Pico_channel_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Pico_channel_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Pico_channel_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Pico_channel_fb> CreatePico_channel_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    uint8_t channel = 0) {
  Pico_channel_fbBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_channel(channel);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Pico_channel_fb> CreatePico_channel_fbDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint8_t channel = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return MagAOX::logger::CreatePico_channel_fb(
      _fbb,
      name__,
      channel);
}

inline const ::flatbuffers::TypeTable *Pico_channel_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_UCHAR, 0, -1 }
  };
  static const char * const names[] = {
    "name",
    "channel"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Pico_channel_fb *GetPico_channel_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Pico_channel_fb>(buf);
}

inline const MagAOX::logger::Pico_channel_fb *GetSizePrefixedPico_channel_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Pico_channel_fb>(buf);
}

inline bool VerifyPico_channel_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Pico_channel_fb>(nullptr);
}

inline bool VerifySizePrefixedPico_channel_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Pico_channel_fb>(nullptr);
}

inline void FinishPico_channel_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Pico_channel_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPico_channel_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Pico_channel_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_PICOCHANNEL_MAGAOX_LOGGER_H_
