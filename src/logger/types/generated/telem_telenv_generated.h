// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TELEMTELENV_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_TELEMTELENV_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Telem_telenv_fb;
struct Telem_telenv_fbBuilder;

inline const ::flatbuffers::TypeTable *Telem_telenv_fbTypeTable();

struct Telem_telenv_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Telem_telenv_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Telem_telenv_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEMPOUT = 4,
    VT_PRESSURE = 6,
    VT_HUMIDITY = 8,
    VT_WIND = 10,
    VT_WINDDIR = 12,
    VT_TEMPTRUSS = 14,
    VT_TEMPCELL = 16,
    VT_TEMPSECCELL = 18,
    VT_TEMPAMB = 20,
    VT_DEWPOINT = 22
  };
  double tempout() const {
    return GetField<double>(VT_TEMPOUT, 0.0);
  }
  double pressure() const {
    return GetField<double>(VT_PRESSURE, 0.0);
  }
  double humidity() const {
    return GetField<double>(VT_HUMIDITY, 0.0);
  }
  double wind() const {
    return GetField<double>(VT_WIND, 0.0);
  }
  double winddir() const {
    return GetField<double>(VT_WINDDIR, 0.0);
  }
  double temptruss() const {
    return GetField<double>(VT_TEMPTRUSS, 0.0);
  }
  double tempcell() const {
    return GetField<double>(VT_TEMPCELL, 0.0);
  }
  double tempseccell() const {
    return GetField<double>(VT_TEMPSECCELL, 0.0);
  }
  double tempamb() const {
    return GetField<double>(VT_TEMPAMB, 0.0);
  }
  double dewpoint() const {
    return GetField<double>(VT_DEWPOINT, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_TEMPOUT, 8) &&
           VerifyField<double>(verifier, VT_PRESSURE, 8) &&
           VerifyField<double>(verifier, VT_HUMIDITY, 8) &&
           VerifyField<double>(verifier, VT_WIND, 8) &&
           VerifyField<double>(verifier, VT_WINDDIR, 8) &&
           VerifyField<double>(verifier, VT_TEMPTRUSS, 8) &&
           VerifyField<double>(verifier, VT_TEMPCELL, 8) &&
           VerifyField<double>(verifier, VT_TEMPSECCELL, 8) &&
           VerifyField<double>(verifier, VT_TEMPAMB, 8) &&
           VerifyField<double>(verifier, VT_DEWPOINT, 8) &&
           verifier.EndTable();
  }
};

struct Telem_telenv_fbBuilder {
  typedef Telem_telenv_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_tempout(double tempout) {
    fbb_.AddElement<double>(Telem_telenv_fb::VT_TEMPOUT, tempout, 0.0);
  }
  void add_pressure(double pressure) {
    fbb_.AddElement<double>(Telem_telenv_fb::VT_PRESSURE, pressure, 0.0);
  }
  void add_humidity(double humidity) {
    fbb_.AddElement<double>(Telem_telenv_fb::VT_HUMIDITY, humidity, 0.0);
  }
  void add_wind(double wind) {
    fbb_.AddElement<double>(Telem_telenv_fb::VT_WIND, wind, 0.0);
  }
  void add_winddir(double winddir) {
    fbb_.AddElement<double>(Telem_telenv_fb::VT_WINDDIR, winddir, 0.0);
  }
  void add_temptruss(double temptruss) {
    fbb_.AddElement<double>(Telem_telenv_fb::VT_TEMPTRUSS, temptruss, 0.0);
  }
  void add_tempcell(double tempcell) {
    fbb_.AddElement<double>(Telem_telenv_fb::VT_TEMPCELL, tempcell, 0.0);
  }
  void add_tempseccell(double tempseccell) {
    fbb_.AddElement<double>(Telem_telenv_fb::VT_TEMPSECCELL, tempseccell, 0.0);
  }
  void add_tempamb(double tempamb) {
    fbb_.AddElement<double>(Telem_telenv_fb::VT_TEMPAMB, tempamb, 0.0);
  }
  void add_dewpoint(double dewpoint) {
    fbb_.AddElement<double>(Telem_telenv_fb::VT_DEWPOINT, dewpoint, 0.0);
  }
  explicit Telem_telenv_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Telem_telenv_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Telem_telenv_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Telem_telenv_fb> CreateTelem_telenv_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double tempout = 0.0,
    double pressure = 0.0,
    double humidity = 0.0,
    double wind = 0.0,
    double winddir = 0.0,
    double temptruss = 0.0,
    double tempcell = 0.0,
    double tempseccell = 0.0,
    double tempamb = 0.0,
    double dewpoint = 0.0) {
  Telem_telenv_fbBuilder builder_(_fbb);
  builder_.add_dewpoint(dewpoint);
  builder_.add_tempamb(tempamb);
  builder_.add_tempseccell(tempseccell);
  builder_.add_tempcell(tempcell);
  builder_.add_temptruss(temptruss);
  builder_.add_winddir(winddir);
  builder_.add_wind(wind);
  builder_.add_humidity(humidity);
  builder_.add_pressure(pressure);
  builder_.add_tempout(tempout);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *Telem_telenv_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 }
  };
  static const char * const names[] = {
    "tempout",
    "pressure",
    "humidity",
    "wind",
    "winddir",
    "temptruss",
    "tempcell",
    "tempseccell",
    "tempamb",
    "dewpoint"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 10, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Telem_telenv_fb *GetTelem_telenv_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Telem_telenv_fb>(buf);
}

inline const MagAOX::logger::Telem_telenv_fb *GetSizePrefixedTelem_telenv_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Telem_telenv_fb>(buf);
}

inline bool VerifyTelem_telenv_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Telem_telenv_fb>(nullptr);
}

inline bool VerifySizePrefixedTelem_telenv_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Telem_telenv_fb>(nullptr);
}

inline void FinishTelem_telenv_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_telenv_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTelem_telenv_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_telenv_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_TELEMTELENV_MAGAOX_LOGGER_H_
