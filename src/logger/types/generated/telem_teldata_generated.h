// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TELEMTELDATA_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_TELEMTELDATA_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Telem_teldata_fb;
struct Telem_teldata_fbBuilder;

inline const ::flatbuffers::TypeTable *Telem_teldata_fbTypeTable();

struct Telem_teldata_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Telem_teldata_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Telem_teldata_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROI = 4,
    VT_TRACKING = 6,
    VT_GUIDING = 8,
    VT_SLEWING = 10,
    VT_GUIDERMOVING = 12,
    VT_AZ = 14,
    VT_ZD = 16,
    VT_PA = 18,
    VT_DOMEAZ = 20,
    VT_DOMESTAT = 22
  };
  /// rotator of interest
  int32_t roi() const {
    return GetField<int32_t>(VT_ROI, 0);
  }
  /// tracking state
  int32_t tracking() const {
    return GetField<int32_t>(VT_TRACKING, 0);
  }
  /// guiding state
  int32_t guiding() const {
    return GetField<int32_t>(VT_GUIDING, 0);
  }
  /// slewing state
  int32_t slewing() const {
    return GetField<int32_t>(VT_SLEWING, 0);
  }
  /// guider moving state
  int32_t guiderMoving() const {
    return GetField<int32_t>(VT_GUIDERMOVING, 0);
  }
  /// azimuth
  double az() const {
    return GetField<double>(VT_AZ, 0.0);
  }
  /// zenith distance
  double zd() const {
    return GetField<double>(VT_ZD, 0.0);
  }
  /// parallactic angle
  double pa() const {
    return GetField<double>(VT_PA, 0.0);
  }
  /// dome azimuth
  double domeAz() const {
    return GetField<double>(VT_DOMEAZ, 0.0);
  }
  /// dome status
  int32_t domeStat() const {
    return GetField<int32_t>(VT_DOMESTAT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ROI, 4) &&
           VerifyField<int32_t>(verifier, VT_TRACKING, 4) &&
           VerifyField<int32_t>(verifier, VT_GUIDING, 4) &&
           VerifyField<int32_t>(verifier, VT_SLEWING, 4) &&
           VerifyField<int32_t>(verifier, VT_GUIDERMOVING, 4) &&
           VerifyField<double>(verifier, VT_AZ, 8) &&
           VerifyField<double>(verifier, VT_ZD, 8) &&
           VerifyField<double>(verifier, VT_PA, 8) &&
           VerifyField<double>(verifier, VT_DOMEAZ, 8) &&
           VerifyField<int32_t>(verifier, VT_DOMESTAT, 4) &&
           verifier.EndTable();
  }
};

struct Telem_teldata_fbBuilder {
  typedef Telem_teldata_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_roi(int32_t roi) {
    fbb_.AddElement<int32_t>(Telem_teldata_fb::VT_ROI, roi, 0);
  }
  void add_tracking(int32_t tracking) {
    fbb_.AddElement<int32_t>(Telem_teldata_fb::VT_TRACKING, tracking, 0);
  }
  void add_guiding(int32_t guiding) {
    fbb_.AddElement<int32_t>(Telem_teldata_fb::VT_GUIDING, guiding, 0);
  }
  void add_slewing(int32_t slewing) {
    fbb_.AddElement<int32_t>(Telem_teldata_fb::VT_SLEWING, slewing, 0);
  }
  void add_guiderMoving(int32_t guiderMoving) {
    fbb_.AddElement<int32_t>(Telem_teldata_fb::VT_GUIDERMOVING, guiderMoving, 0);
  }
  void add_az(double az) {
    fbb_.AddElement<double>(Telem_teldata_fb::VT_AZ, az, 0.0);
  }
  void add_zd(double zd) {
    fbb_.AddElement<double>(Telem_teldata_fb::VT_ZD, zd, 0.0);
  }
  void add_pa(double pa) {
    fbb_.AddElement<double>(Telem_teldata_fb::VT_PA, pa, 0.0);
  }
  void add_domeAz(double domeAz) {
    fbb_.AddElement<double>(Telem_teldata_fb::VT_DOMEAZ, domeAz, 0.0);
  }
  void add_domeStat(int32_t domeStat) {
    fbb_.AddElement<int32_t>(Telem_teldata_fb::VT_DOMESTAT, domeStat, 0);
  }
  explicit Telem_teldata_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Telem_teldata_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Telem_teldata_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Telem_teldata_fb> CreateTelem_teldata_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t roi = 0,
    int32_t tracking = 0,
    int32_t guiding = 0,
    int32_t slewing = 0,
    int32_t guiderMoving = 0,
    double az = 0.0,
    double zd = 0.0,
    double pa = 0.0,
    double domeAz = 0.0,
    int32_t domeStat = 0) {
  Telem_teldata_fbBuilder builder_(_fbb);
  builder_.add_domeAz(domeAz);
  builder_.add_pa(pa);
  builder_.add_zd(zd);
  builder_.add_az(az);
  builder_.add_domeStat(domeStat);
  builder_.add_guiderMoving(guiderMoving);
  builder_.add_slewing(slewing);
  builder_.add_guiding(guiding);
  builder_.add_tracking(tracking);
  builder_.add_roi(roi);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *Telem_teldata_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 }
  };
  static const char * const names[] = {
    "roi",
    "tracking",
    "guiding",
    "slewing",
    "guiderMoving",
    "az",
    "zd",
    "pa",
    "domeAz",
    "domeStat"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 10, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Telem_teldata_fb *GetTelem_teldata_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Telem_teldata_fb>(buf);
}

inline const MagAOX::logger::Telem_teldata_fb *GetSizePrefixedTelem_teldata_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Telem_teldata_fb>(buf);
}

inline bool VerifyTelem_teldata_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Telem_teldata_fb>(nullptr);
}

inline bool VerifySizePrefixedTelem_teldata_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Telem_teldata_fb>(nullptr);
}

inline void FinishTelem_teldata_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_teldata_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTelem_teldata_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_teldata_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_TELEMTELDATA_MAGAOX_LOGGER_H_
