// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TELEMTELVANE_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_TELEMTELVANE_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Telem_telvane_fb;
struct Telem_telvane_fbBuilder;

inline const ::flatbuffers::TypeTable *Telem_telvane_fbTypeTable();

struct Telem_telvane_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Telem_telvane_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Telem_telvane_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SECZ = 4,
    VT_ENCZ = 6,
    VT_SECX = 8,
    VT_ENCX = 10,
    VT_SECY = 12,
    VT_ENCY = 14,
    VT_SECH = 16,
    VT_ENCH = 18,
    VT_SECV = 20,
    VT_ENCV = 22
  };
  double secz() const {
    return GetField<double>(VT_SECZ, 0.0);
  }
  double encz() const {
    return GetField<double>(VT_ENCZ, 0.0);
  }
  double secx() const {
    return GetField<double>(VT_SECX, 0.0);
  }
  double encx() const {
    return GetField<double>(VT_ENCX, 0.0);
  }
  double secy() const {
    return GetField<double>(VT_SECY, 0.0);
  }
  double ency() const {
    return GetField<double>(VT_ENCY, 0.0);
  }
  double sech() const {
    return GetField<double>(VT_SECH, 0.0);
  }
  double ench() const {
    return GetField<double>(VT_ENCH, 0.0);
  }
  double secv() const {
    return GetField<double>(VT_SECV, 0.0);
  }
  double encv() const {
    return GetField<double>(VT_ENCV, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_SECZ, 8) &&
           VerifyField<double>(verifier, VT_ENCZ, 8) &&
           VerifyField<double>(verifier, VT_SECX, 8) &&
           VerifyField<double>(verifier, VT_ENCX, 8) &&
           VerifyField<double>(verifier, VT_SECY, 8) &&
           VerifyField<double>(verifier, VT_ENCY, 8) &&
           VerifyField<double>(verifier, VT_SECH, 8) &&
           VerifyField<double>(verifier, VT_ENCH, 8) &&
           VerifyField<double>(verifier, VT_SECV, 8) &&
           VerifyField<double>(verifier, VT_ENCV, 8) &&
           verifier.EndTable();
  }
};

struct Telem_telvane_fbBuilder {
  typedef Telem_telvane_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_secz(double secz) {
    fbb_.AddElement<double>(Telem_telvane_fb::VT_SECZ, secz, 0.0);
  }
  void add_encz(double encz) {
    fbb_.AddElement<double>(Telem_telvane_fb::VT_ENCZ, encz, 0.0);
  }
  void add_secx(double secx) {
    fbb_.AddElement<double>(Telem_telvane_fb::VT_SECX, secx, 0.0);
  }
  void add_encx(double encx) {
    fbb_.AddElement<double>(Telem_telvane_fb::VT_ENCX, encx, 0.0);
  }
  void add_secy(double secy) {
    fbb_.AddElement<double>(Telem_telvane_fb::VT_SECY, secy, 0.0);
  }
  void add_ency(double ency) {
    fbb_.AddElement<double>(Telem_telvane_fb::VT_ENCY, ency, 0.0);
  }
  void add_sech(double sech) {
    fbb_.AddElement<double>(Telem_telvane_fb::VT_SECH, sech, 0.0);
  }
  void add_ench(double ench) {
    fbb_.AddElement<double>(Telem_telvane_fb::VT_ENCH, ench, 0.0);
  }
  void add_secv(double secv) {
    fbb_.AddElement<double>(Telem_telvane_fb::VT_SECV, secv, 0.0);
  }
  void add_encv(double encv) {
    fbb_.AddElement<double>(Telem_telvane_fb::VT_ENCV, encv, 0.0);
  }
  explicit Telem_telvane_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Telem_telvane_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Telem_telvane_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Telem_telvane_fb> CreateTelem_telvane_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double secz = 0.0,
    double encz = 0.0,
    double secx = 0.0,
    double encx = 0.0,
    double secy = 0.0,
    double ency = 0.0,
    double sech = 0.0,
    double ench = 0.0,
    double secv = 0.0,
    double encv = 0.0) {
  Telem_telvane_fbBuilder builder_(_fbb);
  builder_.add_encv(encv);
  builder_.add_secv(secv);
  builder_.add_ench(ench);
  builder_.add_sech(sech);
  builder_.add_ency(ency);
  builder_.add_secy(secy);
  builder_.add_encx(encx);
  builder_.add_secx(secx);
  builder_.add_encz(encz);
  builder_.add_secz(secz);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *Telem_telvane_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 }
  };
  static const char * const names[] = {
    "secz",
    "encz",
    "secx",
    "encx",
    "secy",
    "ency",
    "sech",
    "ench",
    "secv",
    "encv"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 10, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Telem_telvane_fb *GetTelem_telvane_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Telem_telvane_fb>(buf);
}

inline const MagAOX::logger::Telem_telvane_fb *GetSizePrefixedTelem_telvane_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Telem_telvane_fb>(buf);
}

inline bool VerifyTelem_telvane_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Telem_telvane_fb>(nullptr);
}

inline bool VerifySizePrefixedTelem_telvane_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Telem_telvane_fb>(nullptr);
}

inline void FinishTelem_telvane_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_telvane_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTelem_telvane_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_telvane_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_TELEMTELVANE_MAGAOX_LOGGER_H_
