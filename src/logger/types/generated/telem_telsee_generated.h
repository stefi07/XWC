// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TELEMTELSEE_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_TELEMTELSEE_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Telem_telsee_fb;
struct Telem_telsee_fbBuilder;

inline const ::flatbuffers::TypeTable *Telem_telsee_fbTypeTable();

struct Telem_telsee_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Telem_telsee_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Telem_telsee_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DIMM_TIME = 4,
    VT_DIMM_EL = 6,
    VT_DIMM_FWHM_CORR = 8,
    VT_DIMM_FWHM_BAD = 10,
    VT_MAG1_TIME = 12,
    VT_MAG1_EL = 14,
    VT_MAG1_FWHM = 16,
    VT_MAG1_FWHM_CORR = 18,
    VT_MAG2_TIME = 20,
    VT_MAG2_EL = 22,
    VT_MAG2_FWHM = 24,
    VT_MAG2_FWHM_CORR = 26
  };
  int32_t dimm_time() const {
    return GetField<int32_t>(VT_DIMM_TIME, 0);
  }
  double dimm_el() const {
    return GetField<double>(VT_DIMM_EL, 0.0);
  }
  double dimm_fwhm_corr() const {
    return GetField<double>(VT_DIMM_FWHM_CORR, 0.0);
  }
  double dimm_fwhm_bad() const {
    return GetField<double>(VT_DIMM_FWHM_BAD, 0.0);
  }
  int32_t mag1_time() const {
    return GetField<int32_t>(VT_MAG1_TIME, 0);
  }
  double mag1_el() const {
    return GetField<double>(VT_MAG1_EL, 0.0);
  }
  double mag1_fwhm() const {
    return GetField<double>(VT_MAG1_FWHM, 0.0);
  }
  double mag1_fwhm_corr() const {
    return GetField<double>(VT_MAG1_FWHM_CORR, 0.0);
  }
  int32_t mag2_time() const {
    return GetField<int32_t>(VT_MAG2_TIME, 0);
  }
  double mag2_el() const {
    return GetField<double>(VT_MAG2_EL, 0.0);
  }
  double mag2_fwhm() const {
    return GetField<double>(VT_MAG2_FWHM, 0.0);
  }
  double mag2_fwhm_corr() const {
    return GetField<double>(VT_MAG2_FWHM_CORR, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_DIMM_TIME, 4) &&
           VerifyField<double>(verifier, VT_DIMM_EL, 8) &&
           VerifyField<double>(verifier, VT_DIMM_FWHM_CORR, 8) &&
           VerifyField<double>(verifier, VT_DIMM_FWHM_BAD, 8) &&
           VerifyField<int32_t>(verifier, VT_MAG1_TIME, 4) &&
           VerifyField<double>(verifier, VT_MAG1_EL, 8) &&
           VerifyField<double>(verifier, VT_MAG1_FWHM, 8) &&
           VerifyField<double>(verifier, VT_MAG1_FWHM_CORR, 8) &&
           VerifyField<int32_t>(verifier, VT_MAG2_TIME, 4) &&
           VerifyField<double>(verifier, VT_MAG2_EL, 8) &&
           VerifyField<double>(verifier, VT_MAG2_FWHM, 8) &&
           VerifyField<double>(verifier, VT_MAG2_FWHM_CORR, 8) &&
           verifier.EndTable();
  }
};

struct Telem_telsee_fbBuilder {
  typedef Telem_telsee_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_dimm_time(int32_t dimm_time) {
    fbb_.AddElement<int32_t>(Telem_telsee_fb::VT_DIMM_TIME, dimm_time, 0);
  }
  void add_dimm_el(double dimm_el) {
    fbb_.AddElement<double>(Telem_telsee_fb::VT_DIMM_EL, dimm_el, 0.0);
  }
  void add_dimm_fwhm_corr(double dimm_fwhm_corr) {
    fbb_.AddElement<double>(Telem_telsee_fb::VT_DIMM_FWHM_CORR, dimm_fwhm_corr, 0.0);
  }
  void add_dimm_fwhm_bad(double dimm_fwhm_bad) {
    fbb_.AddElement<double>(Telem_telsee_fb::VT_DIMM_FWHM_BAD, dimm_fwhm_bad, 0.0);
  }
  void add_mag1_time(int32_t mag1_time) {
    fbb_.AddElement<int32_t>(Telem_telsee_fb::VT_MAG1_TIME, mag1_time, 0);
  }
  void add_mag1_el(double mag1_el) {
    fbb_.AddElement<double>(Telem_telsee_fb::VT_MAG1_EL, mag1_el, 0.0);
  }
  void add_mag1_fwhm(double mag1_fwhm) {
    fbb_.AddElement<double>(Telem_telsee_fb::VT_MAG1_FWHM, mag1_fwhm, 0.0);
  }
  void add_mag1_fwhm_corr(double mag1_fwhm_corr) {
    fbb_.AddElement<double>(Telem_telsee_fb::VT_MAG1_FWHM_CORR, mag1_fwhm_corr, 0.0);
  }
  void add_mag2_time(int32_t mag2_time) {
    fbb_.AddElement<int32_t>(Telem_telsee_fb::VT_MAG2_TIME, mag2_time, 0);
  }
  void add_mag2_el(double mag2_el) {
    fbb_.AddElement<double>(Telem_telsee_fb::VT_MAG2_EL, mag2_el, 0.0);
  }
  void add_mag2_fwhm(double mag2_fwhm) {
    fbb_.AddElement<double>(Telem_telsee_fb::VT_MAG2_FWHM, mag2_fwhm, 0.0);
  }
  void add_mag2_fwhm_corr(double mag2_fwhm_corr) {
    fbb_.AddElement<double>(Telem_telsee_fb::VT_MAG2_FWHM_CORR, mag2_fwhm_corr, 0.0);
  }
  explicit Telem_telsee_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Telem_telsee_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Telem_telsee_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Telem_telsee_fb> CreateTelem_telsee_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t dimm_time = 0,
    double dimm_el = 0.0,
    double dimm_fwhm_corr = 0.0,
    double dimm_fwhm_bad = 0.0,
    int32_t mag1_time = 0,
    double mag1_el = 0.0,
    double mag1_fwhm = 0.0,
    double mag1_fwhm_corr = 0.0,
    int32_t mag2_time = 0,
    double mag2_el = 0.0,
    double mag2_fwhm = 0.0,
    double mag2_fwhm_corr = 0.0) {
  Telem_telsee_fbBuilder builder_(_fbb);
  builder_.add_mag2_fwhm_corr(mag2_fwhm_corr);
  builder_.add_mag2_fwhm(mag2_fwhm);
  builder_.add_mag2_el(mag2_el);
  builder_.add_mag1_fwhm_corr(mag1_fwhm_corr);
  builder_.add_mag1_fwhm(mag1_fwhm);
  builder_.add_mag1_el(mag1_el);
  builder_.add_dimm_fwhm_bad(dimm_fwhm_bad);
  builder_.add_dimm_fwhm_corr(dimm_fwhm_corr);
  builder_.add_dimm_el(dimm_el);
  builder_.add_mag2_time(mag2_time);
  builder_.add_mag1_time(mag1_time);
  builder_.add_dimm_time(dimm_time);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *Telem_telsee_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 }
  };
  static const char * const names[] = {
    "dimm_time",
    "dimm_el",
    "dimm_fwhm_corr",
    "dimm_fwhm_bad",
    "mag1_time",
    "mag1_el",
    "mag1_fwhm",
    "mag1_fwhm_corr",
    "mag2_time",
    "mag2_el",
    "mag2_fwhm",
    "mag2_fwhm_corr"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 12, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Telem_telsee_fb *GetTelem_telsee_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Telem_telsee_fb>(buf);
}

inline const MagAOX::logger::Telem_telsee_fb *GetSizePrefixedTelem_telsee_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Telem_telsee_fb>(buf);
}

inline bool VerifyTelem_telsee_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Telem_telsee_fb>(nullptr);
}

inline bool VerifySizePrefixedTelem_telsee_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Telem_telsee_fb>(nullptr);
}

inline void FinishTelem_telsee_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_telsee_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTelem_telsee_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_telsee_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_TELEMTELSEE_MAGAOX_LOGGER_H_
