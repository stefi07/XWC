// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TELEMPOKELOOP_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_TELEMPOKELOOP_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Telem_pokeloop_fb;
struct Telem_pokeloop_fbBuilder;

inline const ::flatbuffers::TypeTable *Telem_pokeloop_fbTypeTable();

struct Telem_pokeloop_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Telem_pokeloop_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Telem_pokeloop_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MEASURING = 4,
    VT_DELTAX = 6,
    VT_DELTAY = 8,
    VT_COUNTER = 10
  };
  /// Flag indicating if the WFS is measuring
  uint8_t measuring() const {
    return GetField<uint8_t>(VT_MEASURING, 0);
  }
  /// The delta-X position
  float deltaX() const {
    return GetField<float>(VT_DELTAX, 0.0f);
  }
  /// The delta-Y position
  float deltaY() const {
    return GetField<float>(VT_DELTAY, 0.0f);
  }
  /// Current loop counter
  uint64_t counter() const {
    return GetField<uint64_t>(VT_COUNTER, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MEASURING, 1) &&
           VerifyField<float>(verifier, VT_DELTAX, 4) &&
           VerifyField<float>(verifier, VT_DELTAY, 4) &&
           VerifyField<uint64_t>(verifier, VT_COUNTER, 8) &&
           verifier.EndTable();
  }
};

struct Telem_pokeloop_fbBuilder {
  typedef Telem_pokeloop_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_measuring(uint8_t measuring) {
    fbb_.AddElement<uint8_t>(Telem_pokeloop_fb::VT_MEASURING, measuring, 0);
  }
  void add_deltaX(float deltaX) {
    fbb_.AddElement<float>(Telem_pokeloop_fb::VT_DELTAX, deltaX, 0.0f);
  }
  void add_deltaY(float deltaY) {
    fbb_.AddElement<float>(Telem_pokeloop_fb::VT_DELTAY, deltaY, 0.0f);
  }
  void add_counter(uint64_t counter) {
    fbb_.AddElement<uint64_t>(Telem_pokeloop_fb::VT_COUNTER, counter, 0);
  }
  explicit Telem_pokeloop_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Telem_pokeloop_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Telem_pokeloop_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Telem_pokeloop_fb> CreateTelem_pokeloop_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t measuring = 0,
    float deltaX = 0.0f,
    float deltaY = 0.0f,
    uint64_t counter = 0) {
  Telem_pokeloop_fbBuilder builder_(_fbb);
  builder_.add_counter(counter);
  builder_.add_deltaY(deltaY);
  builder_.add_deltaX(deltaX);
  builder_.add_measuring(measuring);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *Telem_pokeloop_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_ULONG, 0, -1 }
  };
  static const char * const names[] = {
    "measuring",
    "deltaX",
    "deltaY",
    "counter"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 4, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Telem_pokeloop_fb *GetTelem_pokeloop_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Telem_pokeloop_fb>(buf);
}

inline const MagAOX::logger::Telem_pokeloop_fb *GetSizePrefixedTelem_pokeloop_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Telem_pokeloop_fb>(buf);
}

inline bool VerifyTelem_pokeloop_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Telem_pokeloop_fb>(nullptr);
}

inline bool VerifySizePrefixedTelem_pokeloop_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Telem_pokeloop_fb>(nullptr);
}

inline void FinishTelem_pokeloop_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_pokeloop_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTelem_pokeloop_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_pokeloop_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_TELEMPOKELOOP_MAGAOX_LOGGER_H_
