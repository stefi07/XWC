// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TELEMZABER_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_TELEMZABER_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Telem_zaber_fb;
struct Telem_zaber_fbBuilder;

inline const ::flatbuffers::TypeTable *Telem_zaber_fbTypeTable();

struct Telem_zaber_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Telem_zaber_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Telem_zaber_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_RAWPOS = 6,
    VT_TEMP = 8
  };
  /// stage position in mm
  float pos() const {
    return GetField<float>(VT_POS, 0.0f);
  }
  /// stage raw position, in counts
  float rawPos() const {
    return GetField<float>(VT_RAWPOS, 0.0f);
  }
  /// stage temperature
  float temp() const {
    return GetField<float>(VT_TEMP, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_POS, 4) &&
           VerifyField<float>(verifier, VT_RAWPOS, 4) &&
           VerifyField<float>(verifier, VT_TEMP, 4) &&
           verifier.EndTable();
  }
};

struct Telem_zaber_fbBuilder {
  typedef Telem_zaber_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pos(float pos) {
    fbb_.AddElement<float>(Telem_zaber_fb::VT_POS, pos, 0.0f);
  }
  void add_rawPos(float rawPos) {
    fbb_.AddElement<float>(Telem_zaber_fb::VT_RAWPOS, rawPos, 0.0f);
  }
  void add_temp(float temp) {
    fbb_.AddElement<float>(Telem_zaber_fb::VT_TEMP, temp, 0.0f);
  }
  explicit Telem_zaber_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Telem_zaber_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Telem_zaber_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Telem_zaber_fb> CreateTelem_zaber_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float pos = 0.0f,
    float rawPos = 0.0f,
    float temp = 0.0f) {
  Telem_zaber_fbBuilder builder_(_fbb);
  builder_.add_temp(temp);
  builder_.add_rawPos(rawPos);
  builder_.add_pos(pos);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *Telem_zaber_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 0, -1 }
  };
  static const char * const names[] = {
    "pos",
    "rawPos",
    "temp"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Telem_zaber_fb *GetTelem_zaber_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Telem_zaber_fb>(buf);
}

inline const MagAOX::logger::Telem_zaber_fb *GetSizePrefixedTelem_zaber_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Telem_zaber_fb>(buf);
}

inline bool VerifyTelem_zaber_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Telem_zaber_fb>(nullptr);
}

inline bool VerifySizePrefixedTelem_zaber_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Telem_zaber_fb>(nullptr);
}

inline void FinishTelem_zaber_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_zaber_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTelem_zaber_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_zaber_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_TELEMZABER_MAGAOX_LOGGER_H_
