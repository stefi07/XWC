// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TTMMODPARAMS_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_TTMMODPARAMS_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Ttmmod_params_fb;
struct Ttmmod_params_fbBuilder;

inline const ::flatbuffers::TypeTable *Ttmmod_params_fbTypeTable();

struct Ttmmod_params_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Ttmmod_params_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Ttmmod_params_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MODSTATE = 4,
    VT_MODFREQ = 6,
    VT_MODRAD = 8,
    VT_OFFSET1 = 10,
    VT_OFFSET2 = 12
  };
  uint8_t modState() const {
    return GetField<uint8_t>(VT_MODSTATE, 0);
  }
  double modFreq() const {
    return GetField<double>(VT_MODFREQ, 0.0);
  }
  double modRad() const {
    return GetField<double>(VT_MODRAD, 0.0);
  }
  double offset1() const {
    return GetField<double>(VT_OFFSET1, 0.0);
  }
  double offset2() const {
    return GetField<double>(VT_OFFSET2, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MODSTATE, 1) &&
           VerifyField<double>(verifier, VT_MODFREQ, 8) &&
           VerifyField<double>(verifier, VT_MODRAD, 8) &&
           VerifyField<double>(verifier, VT_OFFSET1, 8) &&
           VerifyField<double>(verifier, VT_OFFSET2, 8) &&
           verifier.EndTable();
  }
};

struct Ttmmod_params_fbBuilder {
  typedef Ttmmod_params_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_modState(uint8_t modState) {
    fbb_.AddElement<uint8_t>(Ttmmod_params_fb::VT_MODSTATE, modState, 0);
  }
  void add_modFreq(double modFreq) {
    fbb_.AddElement<double>(Ttmmod_params_fb::VT_MODFREQ, modFreq, 0.0);
  }
  void add_modRad(double modRad) {
    fbb_.AddElement<double>(Ttmmod_params_fb::VT_MODRAD, modRad, 0.0);
  }
  void add_offset1(double offset1) {
    fbb_.AddElement<double>(Ttmmod_params_fb::VT_OFFSET1, offset1, 0.0);
  }
  void add_offset2(double offset2) {
    fbb_.AddElement<double>(Ttmmod_params_fb::VT_OFFSET2, offset2, 0.0);
  }
  explicit Ttmmod_params_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Ttmmod_params_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Ttmmod_params_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Ttmmod_params_fb> CreateTtmmod_params_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t modState = 0,
    double modFreq = 0.0,
    double modRad = 0.0,
    double offset1 = 0.0,
    double offset2 = 0.0) {
  Ttmmod_params_fbBuilder builder_(_fbb);
  builder_.add_offset2(offset2);
  builder_.add_offset1(offset1);
  builder_.add_modRad(modRad);
  builder_.add_modFreq(modFreq);
  builder_.add_modState(modState);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *Ttmmod_params_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_UCHAR, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 },
    { ::flatbuffers::ET_DOUBLE, 0, -1 }
  };
  static const char * const names[] = {
    "modState",
    "modFreq",
    "modRad",
    "offset1",
    "offset2"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 5, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Ttmmod_params_fb *GetTtmmod_params_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Ttmmod_params_fb>(buf);
}

inline const MagAOX::logger::Ttmmod_params_fb *GetSizePrefixedTtmmod_params_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Ttmmod_params_fb>(buf);
}

inline bool VerifyTtmmod_params_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Ttmmod_params_fb>(nullptr);
}

inline bool VerifySizePrefixedTtmmod_params_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Ttmmod_params_fb>(nullptr);
}

inline void FinishTtmmod_params_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Ttmmod_params_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTtmmod_params_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Ttmmod_params_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_TTMMODPARAMS_MAGAOX_LOGGER_H_
