// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TELEMOBSERVER_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_TELEMOBSERVER_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Telem_observer_fb;
struct Telem_observer_fbBuilder;

inline const ::flatbuffers::TypeTable *Telem_observer_fbTypeTable();

struct Telem_observer_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Telem_observer_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Telem_observer_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EMAIL = 4,
    VT_OBSNAME = 6,
    VT_OBSERVING = 8
  };
  const ::flatbuffers::String *email() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EMAIL);
  }
  const ::flatbuffers::String *obsName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBSNAME);
  }
  bool observing() const {
    return GetField<uint8_t>(VT_OBSERVING, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EMAIL) &&
           verifier.VerifyString(email()) &&
           VerifyOffset(verifier, VT_OBSNAME) &&
           verifier.VerifyString(obsName()) &&
           VerifyField<uint8_t>(verifier, VT_OBSERVING, 1) &&
           verifier.EndTable();
  }
};

struct Telem_observer_fbBuilder {
  typedef Telem_observer_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_email(::flatbuffers::Offset<::flatbuffers::String> email) {
    fbb_.AddOffset(Telem_observer_fb::VT_EMAIL, email);
  }
  void add_obsName(::flatbuffers::Offset<::flatbuffers::String> obsName) {
    fbb_.AddOffset(Telem_observer_fb::VT_OBSNAME, obsName);
  }
  void add_observing(bool observing) {
    fbb_.AddElement<uint8_t>(Telem_observer_fb::VT_OBSERVING, static_cast<uint8_t>(observing), 0);
  }
  explicit Telem_observer_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Telem_observer_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Telem_observer_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Telem_observer_fb> CreateTelem_observer_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> email = 0,
    ::flatbuffers::Offset<::flatbuffers::String> obsName = 0,
    bool observing = false) {
  Telem_observer_fbBuilder builder_(_fbb);
  builder_.add_obsName(obsName);
  builder_.add_email(email);
  builder_.add_observing(observing);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Telem_observer_fb> CreateTelem_observer_fbDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *email = nullptr,
    const char *obsName = nullptr,
    bool observing = false) {
  auto email__ = email ? _fbb.CreateString(email) : 0;
  auto obsName__ = obsName ? _fbb.CreateString(obsName) : 0;
  return MagAOX::logger::CreateTelem_observer_fb(
      _fbb,
      email__,
      obsName__,
      observing);
}

inline const ::flatbuffers::TypeTable *Telem_observer_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 }
  };
  static const char * const names[] = {
    "email",
    "obsName",
    "observing"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Telem_observer_fb *GetTelem_observer_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Telem_observer_fb>(buf);
}

inline const MagAOX::logger::Telem_observer_fb *GetSizePrefixedTelem_observer_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Telem_observer_fb>(buf);
}

inline bool VerifyTelem_observer_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Telem_observer_fb>(nullptr);
}

inline bool VerifySizePrefixedTelem_observer_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Telem_observer_fb>(nullptr);
}

inline void FinishTelem_observer_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_observer_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTelem_observer_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_observer_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_TELEMOBSERVER_MAGAOX_LOGGER_H_
