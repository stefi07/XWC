// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TELEMCHRONYSTATUS_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_TELEMCHRONYSTATUS_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Telem_chrony_status_fb;
struct Telem_chrony_status_fbBuilder;

inline const ::flatbuffers::TypeTable *Telem_chrony_status_fbTypeTable();

struct Telem_chrony_status_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Telem_chrony_status_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Telem_chrony_status_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SOURCEMAC = 4,
    VT_SOURCEIP = 6,
    VT_SYNCH = 8,
    VT_LEAP = 10
  };
  const ::flatbuffers::String *sourceMAC() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEMAC);
  }
  const ::flatbuffers::String *sourceIP() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEIP);
  }
  const ::flatbuffers::String *synch() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SYNCH);
  }
  const ::flatbuffers::String *leap() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LEAP);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SOURCEMAC) &&
           verifier.VerifyString(sourceMAC()) &&
           VerifyOffset(verifier, VT_SOURCEIP) &&
           verifier.VerifyString(sourceIP()) &&
           VerifyOffset(verifier, VT_SYNCH) &&
           verifier.VerifyString(synch()) &&
           VerifyOffset(verifier, VT_LEAP) &&
           verifier.VerifyString(leap()) &&
           verifier.EndTable();
  }
};

struct Telem_chrony_status_fbBuilder {
  typedef Telem_chrony_status_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_sourceMAC(::flatbuffers::Offset<::flatbuffers::String> sourceMAC) {
    fbb_.AddOffset(Telem_chrony_status_fb::VT_SOURCEMAC, sourceMAC);
  }
  void add_sourceIP(::flatbuffers::Offset<::flatbuffers::String> sourceIP) {
    fbb_.AddOffset(Telem_chrony_status_fb::VT_SOURCEIP, sourceIP);
  }
  void add_synch(::flatbuffers::Offset<::flatbuffers::String> synch) {
    fbb_.AddOffset(Telem_chrony_status_fb::VT_SYNCH, synch);
  }
  void add_leap(::flatbuffers::Offset<::flatbuffers::String> leap) {
    fbb_.AddOffset(Telem_chrony_status_fb::VT_LEAP, leap);
  }
  explicit Telem_chrony_status_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Telem_chrony_status_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Telem_chrony_status_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Telem_chrony_status_fb> CreateTelem_chrony_status_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> sourceMAC = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceIP = 0,
    ::flatbuffers::Offset<::flatbuffers::String> synch = 0,
    ::flatbuffers::Offset<::flatbuffers::String> leap = 0) {
  Telem_chrony_status_fbBuilder builder_(_fbb);
  builder_.add_leap(leap);
  builder_.add_synch(synch);
  builder_.add_sourceIP(sourceIP);
  builder_.add_sourceMAC(sourceMAC);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Telem_chrony_status_fb> CreateTelem_chrony_status_fbDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *sourceMAC = nullptr,
    const char *sourceIP = nullptr,
    const char *synch = nullptr,
    const char *leap = nullptr) {
  auto sourceMAC__ = sourceMAC ? _fbb.CreateString(sourceMAC) : 0;
  auto sourceIP__ = sourceIP ? _fbb.CreateString(sourceIP) : 0;
  auto synch__ = synch ? _fbb.CreateString(synch) : 0;
  auto leap__ = leap ? _fbb.CreateString(leap) : 0;
  return MagAOX::logger::CreateTelem_chrony_status_fb(
      _fbb,
      sourceMAC__,
      sourceIP__,
      synch__,
      leap__);
}

inline const ::flatbuffers::TypeTable *Telem_chrony_status_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "sourceMAC",
    "sourceIP",
    "synch",
    "leap"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 4, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Telem_chrony_status_fb *GetTelem_chrony_status_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Telem_chrony_status_fb>(buf);
}

inline const MagAOX::logger::Telem_chrony_status_fb *GetSizePrefixedTelem_chrony_status_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Telem_chrony_status_fb>(buf);
}

inline bool VerifyTelem_chrony_status_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Telem_chrony_status_fb>(nullptr);
}

inline bool VerifySizePrefixedTelem_chrony_status_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Telem_chrony_status_fb>(nullptr);
}

inline void FinishTelem_chrony_status_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_chrony_status_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTelem_chrony_status_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_chrony_status_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_TELEMCHRONYSTATUS_MAGAOX_LOGGER_H_
