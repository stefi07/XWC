// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TELEMCOOLER_MAGAOX_LOGGER_H_
#define FLATBUFFERS_GENERATED_TELEMCOOLER_MAGAOX_LOGGER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MagAOX {
namespace logger {

struct Telem_cooler_fb;
struct Telem_cooler_fbBuilder;

inline const ::flatbuffers::TypeTable *Telem_cooler_fbTypeTable();

struct Telem_cooler_fb FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Telem_cooler_fbBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return Telem_cooler_fbTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LIQUIDTEMP = 4,
    VT_FLOWRATE = 6,
    VT_PUMPLEVEL = 8,
    VT_PUMPSPEED = 10,
    VT_FANLEVEL = 12,
    VT_FANSPEED = 14
  };
  float liquidTemp() const {
    return GetField<float>(VT_LIQUIDTEMP, 0.0f);
  }
  float flowRate() const {
    return GetField<float>(VT_FLOWRATE, 0.0f);
  }
  uint8_t pumpLevel() const {
    return GetField<uint8_t>(VT_PUMPLEVEL, 0);
  }
  uint16_t pumpSpeed() const {
    return GetField<uint16_t>(VT_PUMPSPEED, 0);
  }
  uint8_t fanLevel() const {
    return GetField<uint8_t>(VT_FANLEVEL, 0);
  }
  uint16_t fanSpeed() const {
    return GetField<uint16_t>(VT_FANSPEED, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_LIQUIDTEMP, 4) &&
           VerifyField<float>(verifier, VT_FLOWRATE, 4) &&
           VerifyField<uint8_t>(verifier, VT_PUMPLEVEL, 1) &&
           VerifyField<uint16_t>(verifier, VT_PUMPSPEED, 2) &&
           VerifyField<uint8_t>(verifier, VT_FANLEVEL, 1) &&
           VerifyField<uint16_t>(verifier, VT_FANSPEED, 2) &&
           verifier.EndTable();
  }
};

struct Telem_cooler_fbBuilder {
  typedef Telem_cooler_fb Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_liquidTemp(float liquidTemp) {
    fbb_.AddElement<float>(Telem_cooler_fb::VT_LIQUIDTEMP, liquidTemp, 0.0f);
  }
  void add_flowRate(float flowRate) {
    fbb_.AddElement<float>(Telem_cooler_fb::VT_FLOWRATE, flowRate, 0.0f);
  }
  void add_pumpLevel(uint8_t pumpLevel) {
    fbb_.AddElement<uint8_t>(Telem_cooler_fb::VT_PUMPLEVEL, pumpLevel, 0);
  }
  void add_pumpSpeed(uint16_t pumpSpeed) {
    fbb_.AddElement<uint16_t>(Telem_cooler_fb::VT_PUMPSPEED, pumpSpeed, 0);
  }
  void add_fanLevel(uint8_t fanLevel) {
    fbb_.AddElement<uint8_t>(Telem_cooler_fb::VT_FANLEVEL, fanLevel, 0);
  }
  void add_fanSpeed(uint16_t fanSpeed) {
    fbb_.AddElement<uint16_t>(Telem_cooler_fb::VT_FANSPEED, fanSpeed, 0);
  }
  explicit Telem_cooler_fbBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Telem_cooler_fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Telem_cooler_fb>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Telem_cooler_fb> CreateTelem_cooler_fb(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float liquidTemp = 0.0f,
    float flowRate = 0.0f,
    uint8_t pumpLevel = 0,
    uint16_t pumpSpeed = 0,
    uint8_t fanLevel = 0,
    uint16_t fanSpeed = 0) {
  Telem_cooler_fbBuilder builder_(_fbb);
  builder_.add_flowRate(flowRate);
  builder_.add_liquidTemp(liquidTemp);
  builder_.add_fanSpeed(fanSpeed);
  builder_.add_pumpSpeed(pumpSpeed);
  builder_.add_fanLevel(fanLevel);
  builder_.add_pumpLevel(pumpLevel);
  return builder_.Finish();
}

inline const ::flatbuffers::TypeTable *Telem_cooler_fbTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 0, -1 },
    { ::flatbuffers::ET_UCHAR, 0, -1 },
    { ::flatbuffers::ET_USHORT, 0, -1 },
    { ::flatbuffers::ET_UCHAR, 0, -1 },
    { ::flatbuffers::ET_USHORT, 0, -1 }
  };
  static const char * const names[] = {
    "liquidTemp",
    "flowRate",
    "pumpLevel",
    "pumpSpeed",
    "fanLevel",
    "fanSpeed"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 6, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const MagAOX::logger::Telem_cooler_fb *GetTelem_cooler_fb(const void *buf) {
  return ::flatbuffers::GetRoot<MagAOX::logger::Telem_cooler_fb>(buf);
}

inline const MagAOX::logger::Telem_cooler_fb *GetSizePrefixedTelem_cooler_fb(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MagAOX::logger::Telem_cooler_fb>(buf);
}

inline bool VerifyTelem_cooler_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MagAOX::logger::Telem_cooler_fb>(nullptr);
}

inline bool VerifySizePrefixedTelem_cooler_fbBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MagAOX::logger::Telem_cooler_fb>(nullptr);
}

inline void FinishTelem_cooler_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_cooler_fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTelem_cooler_fbBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MagAOX::logger::Telem_cooler_fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace logger
}  // namespace MagAOX

#endif  // FLATBUFFERS_GENERATED_TELEMCOOLER_MAGAOX_LOGGER_H_
